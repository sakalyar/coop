Terminaux inutilisés dans la grammaire

    DOFORI
    OU
    ET
    INF
    INFEG
    EG
    NEG
    NON


Grammaire

    0 $accept: algo $end

    1 $@1: ε

    2 $@2: ε

    3 algo: DEB '{' VARNAME '}' $@1 '{' lparam '}' $@2 block_instr FIN

    4 block_instr: instr
    5            | instr block_instr

    6 lparam: ε
    7       | param
    8       | param ',' lparam

    9 param: VARNAME

   10 instr: SET '{' VARNAME '}' '{' expr '}'
   11      | IF '{' expr '}' if block_instr else fi FI
   12      | IF '{' expr '}' if block_instr ELSE else block_instr fi FI
   13      | DOWHILE begin_while '{' expr '}' while block_instr fwhile OD
   14      | RETURN '{' expr '}'

   15 if: ε

   16 else: ε

   17 fi: ε

   18 begin_while: ε

   19 while: ε

   20 fwhile: ε

   21 expr: VARNAME
   22     | NUMBER
   23     | expr '+' expr
   24     | expr '-' expr
   25     | expr '*' expr
   26     | expr '/' expr
   27     | VRAI
   28     | FAUX
   29     | CALL '{' VARNAME '}' '{' lexpr '}'
   30     | '(' expr ')'

   31 lexpr: tmp_expr
   32      | tmp_expr ',' lexpr

   33 tmp_expr: expr


Terminaux, suivis des règles où ils apparaissent

    $end (0) 0
    '(' (40) 30
    ')' (41) 30
    '*' (42) 25
    '+' (43) 23
    ',' (44) 8 32
    '-' (45) 24
    '/' (47) 26
    '{' (123) 3 10 11 12 13 14 29
    '}' (125) 3 10 11 12 13 14 29
    error (256)
    NUMBER <integer> (258) 22
    VARNAME <var_name> (259) 3 9 10 21 29
    DEB (260) 3
    FIN (261) 3
    SET (262) 10
    RETURN (263) 14
    IF (264) 11 12
    FI (265) 11 12
    ELSE (266) 12
    DOWHILE (267) 13
    OD (268) 13
    DOFORI (269)
    OU (270)
    ET (271)
    INF (272)
    INFEG (273)
    VRAI (274) 27
    FAUX (275) 28
    EG (276)
    NEG (277)
    CALL (278) 29
    NON (279)


Non-terminaux, suivis des règles où ils apparaissent

    $accept (34)
        à gauche: 0
    algo (35)
        à gauche: 3
        à droite: 0
    $@1 (36)
        à gauche: 1
        à droite: 3
    $@2 (37)
        à gauche: 2
        à droite: 3
    block_instr (38)
        à gauche: 4 5
        à droite: 3 5 11 12 13
    lparam (39)
        à gauche: 6 7 8
        à droite: 3 8
    param (40)
        à gauche: 9
        à droite: 7 8
    instr <s> (41)
        à gauche: 10 11 12 13 14
        à droite: 4 5
    if (42)
        à gauche: 15
        à droite: 11 12
    else (43)
        à gauche: 16
        à droite: 11 12
    fi (44)
        à gauche: 17
        à droite: 11 12
    begin_while (45)
        à gauche: 18
        à droite: 13
    while (46)
        à gauche: 19
        à droite: 13
    fwhile (47)
        à gauche: 20
        à droite: 13
    expr <s> (48)
        à gauche: 21 22 23 24 25 26 27 28 29 30
        à droite: 10 11 12 13 14 23 24 25 26 30 33
    lexpr (49)
        à gauche: 31 32
        à droite: 29 32
    tmp_expr (50)
        à gauche: 33
        à droite: 31 32


État 0

    0 $accept: • algo $end

    DEB  décalage et aller à l'état 1

    algo  aller à l'état 2


État 1

    3 algo: DEB • '{' VARNAME '}' $@1 '{' lparam '}' $@2 block_instr FIN

    '{'  décalage et aller à l'état 3


État 2

    0 $accept: algo • $end

    $end  décalage et aller à l'état 4


État 3

    3 algo: DEB '{' • VARNAME '}' $@1 '{' lparam '}' $@2 block_instr FIN

    VARNAME  décalage et aller à l'état 5


État 4

    0 $accept: algo $end •

    $défaut  accepter


État 5

    3 algo: DEB '{' VARNAME • '}' $@1 '{' lparam '}' $@2 block_instr FIN

    '}'  décalage et aller à l'état 6


État 6

    3 algo: DEB '{' VARNAME '}' • $@1 '{' lparam '}' $@2 block_instr FIN

    $défaut  réduction par utilisation de la règle 1 ($@1)

    $@1  aller à l'état 7


État 7

    3 algo: DEB '{' VARNAME '}' $@1 • '{' lparam '}' $@2 block_instr FIN

    '{'  décalage et aller à l'état 8


État 8

    3 algo: DEB '{' VARNAME '}' $@1 '{' • lparam '}' $@2 block_instr FIN

    VARNAME  décalage et aller à l'état 9

    $défaut  réduction par utilisation de la règle 6 (lparam)

    lparam  aller à l'état 10
    param   aller à l'état 11


État 9

    9 param: VARNAME •

    $défaut  réduction par utilisation de la règle 9 (param)


État 10

    3 algo: DEB '{' VARNAME '}' $@1 '{' lparam • '}' $@2 block_instr FIN

    '}'  décalage et aller à l'état 12


État 11

    7 lparam: param •
    8       | param • ',' lparam

    ','  décalage et aller à l'état 13

    $défaut  réduction par utilisation de la règle 7 (lparam)


État 12

    3 algo: DEB '{' VARNAME '}' $@1 '{' lparam '}' • $@2 block_instr FIN

    $défaut  réduction par utilisation de la règle 2 ($@2)

    $@2  aller à l'état 14


État 13

    8 lparam: param ',' • lparam

    VARNAME  décalage et aller à l'état 9

    $défaut  réduction par utilisation de la règle 6 (lparam)

    lparam  aller à l'état 15
    param   aller à l'état 11


État 14

    3 algo: DEB '{' VARNAME '}' $@1 '{' lparam '}' $@2 • block_instr FIN

    SET      décalage et aller à l'état 16
    RETURN   décalage et aller à l'état 17
    IF       décalage et aller à l'état 18
    DOWHILE  décalage et aller à l'état 19

    block_instr  aller à l'état 20
    instr        aller à l'état 21


État 15

    8 lparam: param ',' lparam •

    $défaut  réduction par utilisation de la règle 8 (lparam)


État 16

   10 instr: SET • '{' VARNAME '}' '{' expr '}'

    '{'  décalage et aller à l'état 22


État 17

   14 instr: RETURN • '{' expr '}'

    '{'  décalage et aller à l'état 23


État 18

   11 instr: IF • '{' expr '}' if block_instr else fi FI
   12      | IF • '{' expr '}' if block_instr ELSE else block_instr fi FI

    '{'  décalage et aller à l'état 24


État 19

   13 instr: DOWHILE • begin_while '{' expr '}' while block_instr fwhile OD

    $défaut  réduction par utilisation de la règle 18 (begin_while)

    begin_while  aller à l'état 25


État 20

    3 algo: DEB '{' VARNAME '}' $@1 '{' lparam '}' $@2 block_instr • FIN

    FIN  décalage et aller à l'état 26


État 21

    4 block_instr: instr •
    5            | instr • block_instr

    SET      décalage et aller à l'état 16
    RETURN   décalage et aller à l'état 17
    IF       décalage et aller à l'état 18
    DOWHILE  décalage et aller à l'état 19

    $défaut  réduction par utilisation de la règle 4 (block_instr)

    block_instr  aller à l'état 27
    instr        aller à l'état 21


État 22

   10 instr: SET '{' • VARNAME '}' '{' expr '}'

    VARNAME  décalage et aller à l'état 28


État 23

   14 instr: RETURN '{' • expr '}'

    NUMBER   décalage et aller à l'état 29
    VARNAME  décalage et aller à l'état 30
    VRAI     décalage et aller à l'état 31
    FAUX     décalage et aller à l'état 32
    CALL     décalage et aller à l'état 33
    '('      décalage et aller à l'état 34

    expr  aller à l'état 35


État 24

   11 instr: IF '{' • expr '}' if block_instr else fi FI
   12      | IF '{' • expr '}' if block_instr ELSE else block_instr fi FI

    NUMBER   décalage et aller à l'état 29
    VARNAME  décalage et aller à l'état 30
    VRAI     décalage et aller à l'état 31
    FAUX     décalage et aller à l'état 32
    CALL     décalage et aller à l'état 33
    '('      décalage et aller à l'état 34

    expr  aller à l'état 36


État 25

   13 instr: DOWHILE begin_while • '{' expr '}' while block_instr fwhile OD

    '{'  décalage et aller à l'état 37


État 26

    3 algo: DEB '{' VARNAME '}' $@1 '{' lparam '}' $@2 block_instr FIN •

    $défaut  réduction par utilisation de la règle 3 (algo)


État 27

    5 block_instr: instr block_instr •

    $défaut  réduction par utilisation de la règle 5 (block_instr)


État 28

   10 instr: SET '{' VARNAME • '}' '{' expr '}'

    '}'  décalage et aller à l'état 38


État 29

   22 expr: NUMBER •

    $défaut  réduction par utilisation de la règle 22 (expr)


État 30

   21 expr: VARNAME •

    $défaut  réduction par utilisation de la règle 21 (expr)


État 31

   27 expr: VRAI •

    $défaut  réduction par utilisation de la règle 27 (expr)


État 32

   28 expr: FAUX •

    $défaut  réduction par utilisation de la règle 28 (expr)


État 33

   29 expr: CALL • '{' VARNAME '}' '{' lexpr '}'

    '{'  décalage et aller à l'état 39


État 34

   30 expr: '(' • expr ')'

    NUMBER   décalage et aller à l'état 29
    VARNAME  décalage et aller à l'état 30
    VRAI     décalage et aller à l'état 31
    FAUX     décalage et aller à l'état 32
    CALL     décalage et aller à l'état 33
    '('      décalage et aller à l'état 34

    expr  aller à l'état 40


État 35

   14 instr: RETURN '{' expr • '}'
   23 expr: expr • '+' expr
   24     | expr • '-' expr
   25     | expr • '*' expr
   26     | expr • '/' expr

    '+'  décalage et aller à l'état 41
    '-'  décalage et aller à l'état 42
    '*'  décalage et aller à l'état 43
    '/'  décalage et aller à l'état 44
    '}'  décalage et aller à l'état 45


État 36

   11 instr: IF '{' expr • '}' if block_instr else fi FI
   12      | IF '{' expr • '}' if block_instr ELSE else block_instr fi FI
   23 expr: expr • '+' expr
   24     | expr • '-' expr
   25     | expr • '*' expr
   26     | expr • '/' expr

    '+'  décalage et aller à l'état 41
    '-'  décalage et aller à l'état 42
    '*'  décalage et aller à l'état 43
    '/'  décalage et aller à l'état 44
    '}'  décalage et aller à l'état 46


État 37

   13 instr: DOWHILE begin_while '{' • expr '}' while block_instr fwhile OD

    NUMBER   décalage et aller à l'état 29
    VARNAME  décalage et aller à l'état 30
    VRAI     décalage et aller à l'état 31
    FAUX     décalage et aller à l'état 32
    CALL     décalage et aller à l'état 33
    '('      décalage et aller à l'état 34

    expr  aller à l'état 47


État 38

   10 instr: SET '{' VARNAME '}' • '{' expr '}'

    '{'  décalage et aller à l'état 48


État 39

   29 expr: CALL '{' • VARNAME '}' '{' lexpr '}'

    VARNAME  décalage et aller à l'état 49


État 40

   23 expr: expr • '+' expr
   24     | expr • '-' expr
   25     | expr • '*' expr
   26     | expr • '/' expr
   30     | '(' expr • ')'

    '+'  décalage et aller à l'état 41
    '-'  décalage et aller à l'état 42
    '*'  décalage et aller à l'état 43
    '/'  décalage et aller à l'état 44
    ')'  décalage et aller à l'état 50


État 41

   23 expr: expr '+' • expr

    NUMBER   décalage et aller à l'état 29
    VARNAME  décalage et aller à l'état 30
    VRAI     décalage et aller à l'état 31
    FAUX     décalage et aller à l'état 32
    CALL     décalage et aller à l'état 33
    '('      décalage et aller à l'état 34

    expr  aller à l'état 51


État 42

   24 expr: expr '-' • expr

    NUMBER   décalage et aller à l'état 29
    VARNAME  décalage et aller à l'état 30
    VRAI     décalage et aller à l'état 31
    FAUX     décalage et aller à l'état 32
    CALL     décalage et aller à l'état 33
    '('      décalage et aller à l'état 34

    expr  aller à l'état 52


État 43

   25 expr: expr '*' • expr

    NUMBER   décalage et aller à l'état 29
    VARNAME  décalage et aller à l'état 30
    VRAI     décalage et aller à l'état 31
    FAUX     décalage et aller à l'état 32
    CALL     décalage et aller à l'état 33
    '('      décalage et aller à l'état 34

    expr  aller à l'état 53


État 44

   26 expr: expr '/' • expr

    NUMBER   décalage et aller à l'état 29
    VARNAME  décalage et aller à l'état 30
    VRAI     décalage et aller à l'état 31
    FAUX     décalage et aller à l'état 32
    CALL     décalage et aller à l'état 33
    '('      décalage et aller à l'état 34

    expr  aller à l'état 54


État 45

   14 instr: RETURN '{' expr '}' •

    $défaut  réduction par utilisation de la règle 14 (instr)


État 46

   11 instr: IF '{' expr '}' • if block_instr else fi FI
   12      | IF '{' expr '}' • if block_instr ELSE else block_instr fi FI

    $défaut  réduction par utilisation de la règle 15 (if)

    if  aller à l'état 55


État 47

   13 instr: DOWHILE begin_while '{' expr • '}' while block_instr fwhile OD
   23 expr: expr • '+' expr
   24     | expr • '-' expr
   25     | expr • '*' expr
   26     | expr • '/' expr

    '+'  décalage et aller à l'état 41
    '-'  décalage et aller à l'état 42
    '*'  décalage et aller à l'état 43
    '/'  décalage et aller à l'état 44
    '}'  décalage et aller à l'état 56


État 48

   10 instr: SET '{' VARNAME '}' '{' • expr '}'

    NUMBER   décalage et aller à l'état 29
    VARNAME  décalage et aller à l'état 30
    VRAI     décalage et aller à l'état 31
    FAUX     décalage et aller à l'état 32
    CALL     décalage et aller à l'état 33
    '('      décalage et aller à l'état 34

    expr  aller à l'état 57


État 49

   29 expr: CALL '{' VARNAME • '}' '{' lexpr '}'

    '}'  décalage et aller à l'état 58


État 50

   30 expr: '(' expr ')' •

    $défaut  réduction par utilisation de la règle 30 (expr)


État 51

   23 expr: expr • '+' expr
   23     | expr '+' expr •
   24     | expr • '-' expr
   25     | expr • '*' expr
   26     | expr • '/' expr

    '*'  décalage et aller à l'état 43
    '/'  décalage et aller à l'état 44

    $défaut  réduction par utilisation de la règle 23 (expr)


État 52

   23 expr: expr • '+' expr
   24     | expr • '-' expr
   24     | expr '-' expr •
   25     | expr • '*' expr
   26     | expr • '/' expr

    '*'  décalage et aller à l'état 43
    '/'  décalage et aller à l'état 44

    $défaut  réduction par utilisation de la règle 24 (expr)


État 53

   23 expr: expr • '+' expr
   24     | expr • '-' expr
   25     | expr • '*' expr
   25     | expr '*' expr •
   26     | expr • '/' expr

    $défaut  réduction par utilisation de la règle 25 (expr)


État 54

   23 expr: expr • '+' expr
   24     | expr • '-' expr
   25     | expr • '*' expr
   26     | expr • '/' expr
   26     | expr '/' expr •

    $défaut  réduction par utilisation de la règle 26 (expr)


État 55

   11 instr: IF '{' expr '}' if • block_instr else fi FI
   12      | IF '{' expr '}' if • block_instr ELSE else block_instr fi FI

    SET      décalage et aller à l'état 16
    RETURN   décalage et aller à l'état 17
    IF       décalage et aller à l'état 18
    DOWHILE  décalage et aller à l'état 19

    block_instr  aller à l'état 59
    instr        aller à l'état 21


État 56

   13 instr: DOWHILE begin_while '{' expr '}' • while block_instr fwhile OD

    $défaut  réduction par utilisation de la règle 19 (while)

    while  aller à l'état 60


État 57

   10 instr: SET '{' VARNAME '}' '{' expr • '}'
   23 expr: expr • '+' expr
   24     | expr • '-' expr
   25     | expr • '*' expr
   26     | expr • '/' expr

    '+'  décalage et aller à l'état 41
    '-'  décalage et aller à l'état 42
    '*'  décalage et aller à l'état 43
    '/'  décalage et aller à l'état 44
    '}'  décalage et aller à l'état 61


État 58

   29 expr: CALL '{' VARNAME '}' • '{' lexpr '}'

    '{'  décalage et aller à l'état 62


État 59

   11 instr: IF '{' expr '}' if block_instr • else fi FI
   12      | IF '{' expr '}' if block_instr • ELSE else block_instr fi FI

    ELSE  décalage et aller à l'état 63

    $défaut  réduction par utilisation de la règle 16 (else)

    else  aller à l'état 64


État 60

   13 instr: DOWHILE begin_while '{' expr '}' while • block_instr fwhile OD

    SET      décalage et aller à l'état 16
    RETURN   décalage et aller à l'état 17
    IF       décalage et aller à l'état 18
    DOWHILE  décalage et aller à l'état 19

    block_instr  aller à l'état 65
    instr        aller à l'état 21


État 61

   10 instr: SET '{' VARNAME '}' '{' expr '}' •

    $défaut  réduction par utilisation de la règle 10 (instr)


État 62

   29 expr: CALL '{' VARNAME '}' '{' • lexpr '}'

    NUMBER   décalage et aller à l'état 29
    VARNAME  décalage et aller à l'état 30
    VRAI     décalage et aller à l'état 31
    FAUX     décalage et aller à l'état 32
    CALL     décalage et aller à l'état 33
    '('      décalage et aller à l'état 34

    expr      aller à l'état 66
    lexpr     aller à l'état 67
    tmp_expr  aller à l'état 68


État 63

   12 instr: IF '{' expr '}' if block_instr ELSE • else block_instr fi FI

    $défaut  réduction par utilisation de la règle 16 (else)

    else  aller à l'état 69


État 64

   11 instr: IF '{' expr '}' if block_instr else • fi FI

    $défaut  réduction par utilisation de la règle 17 (fi)

    fi  aller à l'état 70


État 65

   13 instr: DOWHILE begin_while '{' expr '}' while block_instr • fwhile OD

    $défaut  réduction par utilisation de la règle 20 (fwhile)

    fwhile  aller à l'état 71


État 66

   23 expr: expr • '+' expr
   24     | expr • '-' expr
   25     | expr • '*' expr
   26     | expr • '/' expr
   33 tmp_expr: expr •

    '+'  décalage et aller à l'état 41
    '-'  décalage et aller à l'état 42
    '*'  décalage et aller à l'état 43
    '/'  décalage et aller à l'état 44

    $défaut  réduction par utilisation de la règle 33 (tmp_expr)


État 67

   29 expr: CALL '{' VARNAME '}' '{' lexpr • '}'

    '}'  décalage et aller à l'état 72


État 68

   31 lexpr: tmp_expr •
   32      | tmp_expr • ',' lexpr

    ','  décalage et aller à l'état 73

    $défaut  réduction par utilisation de la règle 31 (lexpr)


État 69

   12 instr: IF '{' expr '}' if block_instr ELSE else • block_instr fi FI

    SET      décalage et aller à l'état 16
    RETURN   décalage et aller à l'état 17
    IF       décalage et aller à l'état 18
    DOWHILE  décalage et aller à l'état 19

    block_instr  aller à l'état 74
    instr        aller à l'état 21


État 70

   11 instr: IF '{' expr '}' if block_instr else fi • FI

    FI  décalage et aller à l'état 75


État 71

   13 instr: DOWHILE begin_while '{' expr '}' while block_instr fwhile • OD

    OD  décalage et aller à l'état 76


État 72

   29 expr: CALL '{' VARNAME '}' '{' lexpr '}' •

    $défaut  réduction par utilisation de la règle 29 (expr)


État 73

   32 lexpr: tmp_expr ',' • lexpr

    NUMBER   décalage et aller à l'état 29
    VARNAME  décalage et aller à l'état 30
    VRAI     décalage et aller à l'état 31
    FAUX     décalage et aller à l'état 32
    CALL     décalage et aller à l'état 33
    '('      décalage et aller à l'état 34

    expr      aller à l'état 66
    lexpr     aller à l'état 77
    tmp_expr  aller à l'état 68


État 74

   12 instr: IF '{' expr '}' if block_instr ELSE else block_instr • fi FI

    $défaut  réduction par utilisation de la règle 17 (fi)

    fi  aller à l'état 78


État 75

   11 instr: IF '{' expr '}' if block_instr else fi FI •

    $défaut  réduction par utilisation de la règle 11 (instr)


État 76

   13 instr: DOWHILE begin_while '{' expr '}' while block_instr fwhile OD •

    $défaut  réduction par utilisation de la règle 13 (instr)


État 77

   32 lexpr: tmp_expr ',' lexpr •

    $défaut  réduction par utilisation de la règle 32 (lexpr)


État 78

   12 instr: IF '{' expr '}' if block_instr ELSE else block_instr fi • FI

    FI  décalage et aller à l'état 79


État 79

   12 instr: IF '{' expr '}' if block_instr ELSE else block_instr fi FI •

    $défaut  réduction par utilisation de la règle 12 (instr)
