Terminals unused in grammar

    DOFORI


Grammar

    0 $accept: algo $end

    1 $@1: ε

    2 $@2: ε

    3 algo: DEB '{' VARNAME '}' $@1 '{' lparam '}' $@2 block_instr FIN

    4 block_instr: instr block_instr
    5            | instr

    6 lparam: param ',' lparam
    7       | param

    8 param: VARNAME

    9 instr: SET '{' VARNAME '}' '{' expr '}'
   10      | RETURN '{' expr '}'
   11      | IF '{' expr '}' if block_instr else fi FI
   12      | IF '{' expr '}' if block_instr ELSE else block_instr fi FI
   13      | DOWHILE begin_while '{' expr '}' while block_instr elihw OD

   14 if: ε

   15 else: ε

   16 fi: ε

   17 begin_while: ε

   18 while: ε

   19 elihw: ε

   20 expr: VARNAME
   21     | NUMBER
   22     | expr '+' expr
   23     | expr '-' expr
   24     | expr '*' expr
   25     | expr '/' expr
   26     | VRAI
   27     | FAUX
   28     | expr INF expr
   29     | expr INFEG expr
   30     | expr SUP expr
   31     | expr SUPEG expr
   32     | expr EG expr
   33     | expr NEG expr
   34     | expr OU expr
   35     | expr ET expr
   36     | NON expr
   37     | CALL '{' VARNAME '}' '{' lexpr '}'
   38     | '(' expr ')'

   39 lexpr: tmp_expr
   40      | tmp_expr ',' lexpr

   41 tmp_expr: expr


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 38
    ')' (41) 38
    '*' (42) 24
    '+' (43) 22
    ',' (44) 6 40
    '-' (45) 23
    '/' (47) 25
    '{' (123) 3 9 10 11 12 13 37
    '}' (125) 3 9 10 11 12 13 37
    error (256)
    NUMBER <integer> (258) 21
    VARNAME <var_name> (259) 3 8 9 20 37
    DEB (260) 3
    FIN (261) 3
    SET (262) 9
    RETURN (263) 10
    IF (264) 11 12
    FI (265) 11 12
    ELSE (266) 12
    DOWHILE (267) 13
    OD (268) 13
    DOFORI (269)
    OU (270) 34
    ET (271) 35
    INF (272) 28
    INFEG (273) 29
    SUP (274) 30
    SUPEG (275) 31
    VRAI (276) 26
    FAUX (277) 27
    EG (278) 32
    NEG (279) 33
    CALL (280) 37
    NON (281) 36


Nonterminals, with rules where they appear

    $accept (36)
        on left: 0
    algo (37)
        on left: 3
        on right: 0
    $@1 (38)
        on left: 1
        on right: 3
    $@2 (39)
        on left: 2
        on right: 3
    block_instr (40)
        on left: 4 5
        on right: 3 4 11 12 13
    lparam (41)
        on left: 6 7
        on right: 3 6
    param (42)
        on left: 8
        on right: 6 7
    instr <s> (43)
        on left: 9 10 11 12 13
        on right: 4 5
    if (44)
        on left: 14
        on right: 11 12
    else (45)
        on left: 15
        on right: 11 12
    fi (46)
        on left: 16
        on right: 11 12
    begin_while (47)
        on left: 17
        on right: 13
    while (48)
        on left: 18
        on right: 13
    elihw (49)
        on left: 19
        on right: 13
    expr <s> (50)
        on left: 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38
        on right: 9 10 11 12 13 22 23 24 25 28 29 30 31 32 33 34 35 36 38 41
    lexpr (51)
        on left: 39 40
        on right: 37 40
    tmp_expr (52)
        on left: 41
        on right: 39 40


State 0

    0 $accept: • algo $end

    DEB  shift, and go to state 1

    algo  go to state 2


State 1

    3 algo: DEB • '{' VARNAME '}' $@1 '{' lparam '}' $@2 block_instr FIN

    '{'  shift, and go to state 3


State 2

    0 $accept: algo • $end

    $end  shift, and go to state 4


State 3

    3 algo: DEB '{' • VARNAME '}' $@1 '{' lparam '}' $@2 block_instr FIN

    VARNAME  shift, and go to state 5


State 4

    0 $accept: algo $end •

    $default  accept


State 5

    3 algo: DEB '{' VARNAME • '}' $@1 '{' lparam '}' $@2 block_instr FIN

    '}'  shift, and go to state 6


State 6

    3 algo: DEB '{' VARNAME '}' • $@1 '{' lparam '}' $@2 block_instr FIN

    $default  reduce using rule 1 ($@1)

    $@1  go to state 7


State 7

    3 algo: DEB '{' VARNAME '}' $@1 • '{' lparam '}' $@2 block_instr FIN

    '{'  shift, and go to state 8


State 8

    3 algo: DEB '{' VARNAME '}' $@1 '{' • lparam '}' $@2 block_instr FIN

    VARNAME  shift, and go to state 9

    lparam  go to state 10
    param   go to state 11


State 9

    8 param: VARNAME •

    $default  reduce using rule 8 (param)


State 10

    3 algo: DEB '{' VARNAME '}' $@1 '{' lparam • '}' $@2 block_instr FIN

    '}'  shift, and go to state 12


State 11

    6 lparam: param • ',' lparam
    7       | param •

    ','  shift, and go to state 13

    $default  reduce using rule 7 (lparam)


State 12

    3 algo: DEB '{' VARNAME '}' $@1 '{' lparam '}' • $@2 block_instr FIN

    $default  reduce using rule 2 ($@2)

    $@2  go to state 14


State 13

    6 lparam: param ',' • lparam

    VARNAME  shift, and go to state 9

    lparam  go to state 15
    param   go to state 11


State 14

    3 algo: DEB '{' VARNAME '}' $@1 '{' lparam '}' $@2 • block_instr FIN

    SET      shift, and go to state 16
    RETURN   shift, and go to state 17
    IF       shift, and go to state 18
    DOWHILE  shift, and go to state 19

    block_instr  go to state 20
    instr        go to state 21


State 15

    6 lparam: param ',' lparam •

    $default  reduce using rule 6 (lparam)


State 16

    9 instr: SET • '{' VARNAME '}' '{' expr '}'

    '{'  shift, and go to state 22


State 17

   10 instr: RETURN • '{' expr '}'

    '{'  shift, and go to state 23


State 18

   11 instr: IF • '{' expr '}' if block_instr else fi FI
   12      | IF • '{' expr '}' if block_instr ELSE else block_instr fi FI

    '{'  shift, and go to state 24


State 19

   13 instr: DOWHILE • begin_while '{' expr '}' while block_instr elihw OD

    $default  reduce using rule 17 (begin_while)

    begin_while  go to state 25


State 20

    3 algo: DEB '{' VARNAME '}' $@1 '{' lparam '}' $@2 block_instr • FIN

    FIN  shift, and go to state 26


State 21

    4 block_instr: instr • block_instr
    5            | instr •

    SET      shift, and go to state 16
    RETURN   shift, and go to state 17
    IF       shift, and go to state 18
    DOWHILE  shift, and go to state 19

    $default  reduce using rule 5 (block_instr)

    block_instr  go to state 27
    instr        go to state 21


State 22

    9 instr: SET '{' • VARNAME '}' '{' expr '}'

    VARNAME  shift, and go to state 28


State 23

   10 instr: RETURN '{' • expr '}'

    NUMBER   shift, and go to state 29
    VARNAME  shift, and go to state 30
    VRAI     shift, and go to state 31
    FAUX     shift, and go to state 32
    CALL     shift, and go to state 33
    NON      shift, and go to state 34
    '('      shift, and go to state 35

    expr  go to state 36


State 24

   11 instr: IF '{' • expr '}' if block_instr else fi FI
   12      | IF '{' • expr '}' if block_instr ELSE else block_instr fi FI

    NUMBER   shift, and go to state 29
    VARNAME  shift, and go to state 30
    VRAI     shift, and go to state 31
    FAUX     shift, and go to state 32
    CALL     shift, and go to state 33
    NON      shift, and go to state 34
    '('      shift, and go to state 35

    expr  go to state 37


State 25

   13 instr: DOWHILE begin_while • '{' expr '}' while block_instr elihw OD

    '{'  shift, and go to state 38


State 26

    3 algo: DEB '{' VARNAME '}' $@1 '{' lparam '}' $@2 block_instr FIN •

    $default  reduce using rule 3 (algo)


State 27

    4 block_instr: instr block_instr •

    $default  reduce using rule 4 (block_instr)


State 28

    9 instr: SET '{' VARNAME • '}' '{' expr '}'

    '}'  shift, and go to state 39


State 29

   21 expr: NUMBER •

    $default  reduce using rule 21 (expr)


State 30

   20 expr: VARNAME •

    $default  reduce using rule 20 (expr)


State 31

   26 expr: VRAI •

    $default  reduce using rule 26 (expr)


State 32

   27 expr: FAUX •

    $default  reduce using rule 27 (expr)


State 33

   37 expr: CALL • '{' VARNAME '}' '{' lexpr '}'

    '{'  shift, and go to state 40


State 34

   36 expr: NON • expr

    NUMBER   shift, and go to state 29
    VARNAME  shift, and go to state 30
    VRAI     shift, and go to state 31
    FAUX     shift, and go to state 32
    CALL     shift, and go to state 33
    NON      shift, and go to state 34
    '('      shift, and go to state 35

    expr  go to state 41


State 35

   38 expr: '(' • expr ')'

    NUMBER   shift, and go to state 29
    VARNAME  shift, and go to state 30
    VRAI     shift, and go to state 31
    FAUX     shift, and go to state 32
    CALL     shift, and go to state 33
    NON      shift, and go to state 34
    '('      shift, and go to state 35

    expr  go to state 42


State 36

   10 instr: RETURN '{' expr • '}'
   22 expr: expr • '+' expr
   23     | expr • '-' expr
   24     | expr • '*' expr
   25     | expr • '/' expr
   28     | expr • INF expr
   29     | expr • INFEG expr
   30     | expr • SUP expr
   31     | expr • SUPEG expr
   32     | expr • EG expr
   33     | expr • NEG expr
   34     | expr • OU expr
   35     | expr • ET expr

    OU     shift, and go to state 43
    ET     shift, and go to state 44
    INF    shift, and go to state 45
    INFEG  shift, and go to state 46
    SUP    shift, and go to state 47
    SUPEG  shift, and go to state 48
    EG     shift, and go to state 49
    NEG    shift, and go to state 50
    '+'    shift, and go to state 51
    '-'    shift, and go to state 52
    '*'    shift, and go to state 53
    '/'    shift, and go to state 54
    '}'    shift, and go to state 55


State 37

   11 instr: IF '{' expr • '}' if block_instr else fi FI
   12      | IF '{' expr • '}' if block_instr ELSE else block_instr fi FI
   22 expr: expr • '+' expr
   23     | expr • '-' expr
   24     | expr • '*' expr
   25     | expr • '/' expr
   28     | expr • INF expr
   29     | expr • INFEG expr
   30     | expr • SUP expr
   31     | expr • SUPEG expr
   32     | expr • EG expr
   33     | expr • NEG expr
   34     | expr • OU expr
   35     | expr • ET expr

    OU     shift, and go to state 43
    ET     shift, and go to state 44
    INF    shift, and go to state 45
    INFEG  shift, and go to state 46
    SUP    shift, and go to state 47
    SUPEG  shift, and go to state 48
    EG     shift, and go to state 49
    NEG    shift, and go to state 50
    '+'    shift, and go to state 51
    '-'    shift, and go to state 52
    '*'    shift, and go to state 53
    '/'    shift, and go to state 54
    '}'    shift, and go to state 56


State 38

   13 instr: DOWHILE begin_while '{' • expr '}' while block_instr elihw OD

    NUMBER   shift, and go to state 29
    VARNAME  shift, and go to state 30
    VRAI     shift, and go to state 31
    FAUX     shift, and go to state 32
    CALL     shift, and go to state 33
    NON      shift, and go to state 34
    '('      shift, and go to state 35

    expr  go to state 57


State 39

    9 instr: SET '{' VARNAME '}' • '{' expr '}'

    '{'  shift, and go to state 58


State 40

   37 expr: CALL '{' • VARNAME '}' '{' lexpr '}'

    VARNAME  shift, and go to state 59


State 41

   22 expr: expr • '+' expr
   23     | expr • '-' expr
   24     | expr • '*' expr
   25     | expr • '/' expr
   28     | expr • INF expr
   29     | expr • INFEG expr
   30     | expr • SUP expr
   31     | expr • SUPEG expr
   32     | expr • EG expr
   33     | expr • NEG expr
   34     | expr • OU expr
   35     | expr • ET expr
   36     | NON expr •

    $default  reduce using rule 36 (expr)


State 42

   22 expr: expr • '+' expr
   23     | expr • '-' expr
   24     | expr • '*' expr
   25     | expr • '/' expr
   28     | expr • INF expr
   29     | expr • INFEG expr
   30     | expr • SUP expr
   31     | expr • SUPEG expr
   32     | expr • EG expr
   33     | expr • NEG expr
   34     | expr • OU expr
   35     | expr • ET expr
   38     | '(' expr • ')'

    OU     shift, and go to state 43
    ET     shift, and go to state 44
    INF    shift, and go to state 45
    INFEG  shift, and go to state 46
    SUP    shift, and go to state 47
    SUPEG  shift, and go to state 48
    EG     shift, and go to state 49
    NEG    shift, and go to state 50
    '+'    shift, and go to state 51
    '-'    shift, and go to state 52
    '*'    shift, and go to state 53
    '/'    shift, and go to state 54
    ')'    shift, and go to state 60


State 43

   34 expr: expr OU • expr

    NUMBER   shift, and go to state 29
    VARNAME  shift, and go to state 30
    VRAI     shift, and go to state 31
    FAUX     shift, and go to state 32
    CALL     shift, and go to state 33
    NON      shift, and go to state 34
    '('      shift, and go to state 35

    expr  go to state 61


State 44

   35 expr: expr ET • expr

    NUMBER   shift, and go to state 29
    VARNAME  shift, and go to state 30
    VRAI     shift, and go to state 31
    FAUX     shift, and go to state 32
    CALL     shift, and go to state 33
    NON      shift, and go to state 34
    '('      shift, and go to state 35

    expr  go to state 62


State 45

   28 expr: expr INF • expr

    NUMBER   shift, and go to state 29
    VARNAME  shift, and go to state 30
    VRAI     shift, and go to state 31
    FAUX     shift, and go to state 32
    CALL     shift, and go to state 33
    NON      shift, and go to state 34
    '('      shift, and go to state 35

    expr  go to state 63


State 46

   29 expr: expr INFEG • expr

    NUMBER   shift, and go to state 29
    VARNAME  shift, and go to state 30
    VRAI     shift, and go to state 31
    FAUX     shift, and go to state 32
    CALL     shift, and go to state 33
    NON      shift, and go to state 34
    '('      shift, and go to state 35

    expr  go to state 64


State 47

   30 expr: expr SUP • expr

    NUMBER   shift, and go to state 29
    VARNAME  shift, and go to state 30
    VRAI     shift, and go to state 31
    FAUX     shift, and go to state 32
    CALL     shift, and go to state 33
    NON      shift, and go to state 34
    '('      shift, and go to state 35

    expr  go to state 65


State 48

   31 expr: expr SUPEG • expr

    NUMBER   shift, and go to state 29
    VARNAME  shift, and go to state 30
    VRAI     shift, and go to state 31
    FAUX     shift, and go to state 32
    CALL     shift, and go to state 33
    NON      shift, and go to state 34
    '('      shift, and go to state 35

    expr  go to state 66


State 49

   32 expr: expr EG • expr

    NUMBER   shift, and go to state 29
    VARNAME  shift, and go to state 30
    VRAI     shift, and go to state 31
    FAUX     shift, and go to state 32
    CALL     shift, and go to state 33
    NON      shift, and go to state 34
    '('      shift, and go to state 35

    expr  go to state 67


State 50

   33 expr: expr NEG • expr

    NUMBER   shift, and go to state 29
    VARNAME  shift, and go to state 30
    VRAI     shift, and go to state 31
    FAUX     shift, and go to state 32
    CALL     shift, and go to state 33
    NON      shift, and go to state 34
    '('      shift, and go to state 35

    expr  go to state 68


State 51

   22 expr: expr '+' • expr

    NUMBER   shift, and go to state 29
    VARNAME  shift, and go to state 30
    VRAI     shift, and go to state 31
    FAUX     shift, and go to state 32
    CALL     shift, and go to state 33
    NON      shift, and go to state 34
    '('      shift, and go to state 35

    expr  go to state 69


State 52

   23 expr: expr '-' • expr

    NUMBER   shift, and go to state 29
    VARNAME  shift, and go to state 30
    VRAI     shift, and go to state 31
    FAUX     shift, and go to state 32
    CALL     shift, and go to state 33
    NON      shift, and go to state 34
    '('      shift, and go to state 35

    expr  go to state 70


State 53

   24 expr: expr '*' • expr

    NUMBER   shift, and go to state 29
    VARNAME  shift, and go to state 30
    VRAI     shift, and go to state 31
    FAUX     shift, and go to state 32
    CALL     shift, and go to state 33
    NON      shift, and go to state 34
    '('      shift, and go to state 35

    expr  go to state 71


State 54

   25 expr: expr '/' • expr

    NUMBER   shift, and go to state 29
    VARNAME  shift, and go to state 30
    VRAI     shift, and go to state 31
    FAUX     shift, and go to state 32
    CALL     shift, and go to state 33
    NON      shift, and go to state 34
    '('      shift, and go to state 35

    expr  go to state 72


State 55

   10 instr: RETURN '{' expr '}' •

    $default  reduce using rule 10 (instr)


State 56

   11 instr: IF '{' expr '}' • if block_instr else fi FI
   12      | IF '{' expr '}' • if block_instr ELSE else block_instr fi FI

    $default  reduce using rule 14 (if)

    if  go to state 73


State 57

   13 instr: DOWHILE begin_while '{' expr • '}' while block_instr elihw OD
   22 expr: expr • '+' expr
   23     | expr • '-' expr
   24     | expr • '*' expr
   25     | expr • '/' expr
   28     | expr • INF expr
   29     | expr • INFEG expr
   30     | expr • SUP expr
   31     | expr • SUPEG expr
   32     | expr • EG expr
   33     | expr • NEG expr
   34     | expr • OU expr
   35     | expr • ET expr

    OU     shift, and go to state 43
    ET     shift, and go to state 44
    INF    shift, and go to state 45
    INFEG  shift, and go to state 46
    SUP    shift, and go to state 47
    SUPEG  shift, and go to state 48
    EG     shift, and go to state 49
    NEG    shift, and go to state 50
    '+'    shift, and go to state 51
    '-'    shift, and go to state 52
    '*'    shift, and go to state 53
    '/'    shift, and go to state 54
    '}'    shift, and go to state 74


State 58

    9 instr: SET '{' VARNAME '}' '{' • expr '}'

    NUMBER   shift, and go to state 29
    VARNAME  shift, and go to state 30
    VRAI     shift, and go to state 31
    FAUX     shift, and go to state 32
    CALL     shift, and go to state 33
    NON      shift, and go to state 34
    '('      shift, and go to state 35

    expr  go to state 75


State 59

   37 expr: CALL '{' VARNAME • '}' '{' lexpr '}'

    '}'  shift, and go to state 76


State 60

   38 expr: '(' expr ')' •

    $default  reduce using rule 38 (expr)


State 61

   22 expr: expr • '+' expr
   23     | expr • '-' expr
   24     | expr • '*' expr
   25     | expr • '/' expr
   28     | expr • INF expr
   29     | expr • INFEG expr
   30     | expr • SUP expr
   31     | expr • SUPEG expr
   32     | expr • EG expr
   33     | expr • NEG expr
   34     | expr • OU expr
   34     | expr OU expr •
   35     | expr • ET expr

    ET     shift, and go to state 44
    INF    shift, and go to state 45
    INFEG  shift, and go to state 46
    SUP    shift, and go to state 47
    SUPEG  shift, and go to state 48
    EG     shift, and go to state 49
    NEG    shift, and go to state 50
    '+'    shift, and go to state 51
    '-'    shift, and go to state 52
    '*'    shift, and go to state 53
    '/'    shift, and go to state 54

    $default  reduce using rule 34 (expr)


State 62

   22 expr: expr • '+' expr
   23     | expr • '-' expr
   24     | expr • '*' expr
   25     | expr • '/' expr
   28     | expr • INF expr
   29     | expr • INFEG expr
   30     | expr • SUP expr
   31     | expr • SUPEG expr
   32     | expr • EG expr
   33     | expr • NEG expr
   34     | expr • OU expr
   35     | expr • ET expr
   35     | expr ET expr •

    INF    shift, and go to state 45
    INFEG  shift, and go to state 46
    SUP    shift, and go to state 47
    SUPEG  shift, and go to state 48
    EG     shift, and go to state 49
    NEG    shift, and go to state 50
    '+'    shift, and go to state 51
    '-'    shift, and go to state 52
    '*'    shift, and go to state 53
    '/'    shift, and go to state 54

    $default  reduce using rule 35 (expr)


State 63

   22 expr: expr • '+' expr
   23     | expr • '-' expr
   24     | expr • '*' expr
   25     | expr • '/' expr
   28     | expr • INF expr
   28     | expr INF expr •
   29     | expr • INFEG expr
   30     | expr • SUP expr
   31     | expr • SUPEG expr
   32     | expr • EG expr
   33     | expr • NEG expr
   34     | expr • OU expr
   35     | expr • ET expr

    EG   shift, and go to state 49
    NEG  shift, and go to state 50
    '+'  shift, and go to state 51
    '-'  shift, and go to state 52
    '*'  shift, and go to state 53
    '/'  shift, and go to state 54

    $default  reduce using rule 28 (expr)


State 64

   22 expr: expr • '+' expr
   23     | expr • '-' expr
   24     | expr • '*' expr
   25     | expr • '/' expr
   28     | expr • INF expr
   29     | expr • INFEG expr
   29     | expr INFEG expr •
   30     | expr • SUP expr
   31     | expr • SUPEG expr
   32     | expr • EG expr
   33     | expr • NEG expr
   34     | expr • OU expr
   35     | expr • ET expr

    EG   shift, and go to state 49
    NEG  shift, and go to state 50
    '+'  shift, and go to state 51
    '-'  shift, and go to state 52
    '*'  shift, and go to state 53
    '/'  shift, and go to state 54

    $default  reduce using rule 29 (expr)


State 65

   22 expr: expr • '+' expr
   23     | expr • '-' expr
   24     | expr • '*' expr
   25     | expr • '/' expr
   28     | expr • INF expr
   29     | expr • INFEG expr
   30     | expr • SUP expr
   30     | expr SUP expr •
   31     | expr • SUPEG expr
   32     | expr • EG expr
   33     | expr • NEG expr
   34     | expr • OU expr
   35     | expr • ET expr

    EG   shift, and go to state 49
    NEG  shift, and go to state 50
    '+'  shift, and go to state 51
    '-'  shift, and go to state 52
    '*'  shift, and go to state 53
    '/'  shift, and go to state 54

    $default  reduce using rule 30 (expr)


State 66

   22 expr: expr • '+' expr
   23     | expr • '-' expr
   24     | expr • '*' expr
   25     | expr • '/' expr
   28     | expr • INF expr
   29     | expr • INFEG expr
   30     | expr • SUP expr
   31     | expr • SUPEG expr
   31     | expr SUPEG expr •
   32     | expr • EG expr
   33     | expr • NEG expr
   34     | expr • OU expr
   35     | expr • ET expr

    EG   shift, and go to state 49
    NEG  shift, and go to state 50
    '+'  shift, and go to state 51
    '-'  shift, and go to state 52
    '*'  shift, and go to state 53
    '/'  shift, and go to state 54

    $default  reduce using rule 31 (expr)


State 67

   22 expr: expr • '+' expr
   23     | expr • '-' expr
   24     | expr • '*' expr
   25     | expr • '/' expr
   28     | expr • INF expr
   29     | expr • INFEG expr
   30     | expr • SUP expr
   31     | expr • SUPEG expr
   32     | expr • EG expr
   32     | expr EG expr •
   33     | expr • NEG expr
   34     | expr • OU expr
   35     | expr • ET expr

    '+'  shift, and go to state 51
    '-'  shift, and go to state 52
    '*'  shift, and go to state 53
    '/'  shift, and go to state 54

    $default  reduce using rule 32 (expr)


State 68

   22 expr: expr • '+' expr
   23     | expr • '-' expr
   24     | expr • '*' expr
   25     | expr • '/' expr
   28     | expr • INF expr
   29     | expr • INFEG expr
   30     | expr • SUP expr
   31     | expr • SUPEG expr
   32     | expr • EG expr
   33     | expr • NEG expr
   33     | expr NEG expr •
   34     | expr • OU expr
   35     | expr • ET expr

    '+'  shift, and go to state 51
    '-'  shift, and go to state 52
    '*'  shift, and go to state 53
    '/'  shift, and go to state 54

    $default  reduce using rule 33 (expr)


State 69

   22 expr: expr • '+' expr
   22     | expr '+' expr •
   23     | expr • '-' expr
   24     | expr • '*' expr
   25     | expr • '/' expr
   28     | expr • INF expr
   29     | expr • INFEG expr
   30     | expr • SUP expr
   31     | expr • SUPEG expr
   32     | expr • EG expr
   33     | expr • NEG expr
   34     | expr • OU expr
   35     | expr • ET expr

    '*'  shift, and go to state 53
    '/'  shift, and go to state 54

    $default  reduce using rule 22 (expr)


State 70

   22 expr: expr • '+' expr
   23     | expr • '-' expr
   23     | expr '-' expr •
   24     | expr • '*' expr
   25     | expr • '/' expr
   28     | expr • INF expr
   29     | expr • INFEG expr
   30     | expr • SUP expr
   31     | expr • SUPEG expr
   32     | expr • EG expr
   33     | expr • NEG expr
   34     | expr • OU expr
   35     | expr • ET expr

    '*'  shift, and go to state 53
    '/'  shift, and go to state 54

    $default  reduce using rule 23 (expr)


State 71

   22 expr: expr • '+' expr
   23     | expr • '-' expr
   24     | expr • '*' expr
   24     | expr '*' expr •
   25     | expr • '/' expr
   28     | expr • INF expr
   29     | expr • INFEG expr
   30     | expr • SUP expr
   31     | expr • SUPEG expr
   32     | expr • EG expr
   33     | expr • NEG expr
   34     | expr • OU expr
   35     | expr • ET expr

    $default  reduce using rule 24 (expr)


State 72

   22 expr: expr • '+' expr
   23     | expr • '-' expr
   24     | expr • '*' expr
   25     | expr • '/' expr
   25     | expr '/' expr •
   28     | expr • INF expr
   29     | expr • INFEG expr
   30     | expr • SUP expr
   31     | expr • SUPEG expr
   32     | expr • EG expr
   33     | expr • NEG expr
   34     | expr • OU expr
   35     | expr • ET expr

    $default  reduce using rule 25 (expr)


State 73

   11 instr: IF '{' expr '}' if • block_instr else fi FI
   12      | IF '{' expr '}' if • block_instr ELSE else block_instr fi FI

    SET      shift, and go to state 16
    RETURN   shift, and go to state 17
    IF       shift, and go to state 18
    DOWHILE  shift, and go to state 19

    block_instr  go to state 77
    instr        go to state 21


State 74

   13 instr: DOWHILE begin_while '{' expr '}' • while block_instr elihw OD

    $default  reduce using rule 18 (while)

    while  go to state 78


State 75

    9 instr: SET '{' VARNAME '}' '{' expr • '}'
   22 expr: expr • '+' expr
   23     | expr • '-' expr
   24     | expr • '*' expr
   25     | expr • '/' expr
   28     | expr • INF expr
   29     | expr • INFEG expr
   30     | expr • SUP expr
   31     | expr • SUPEG expr
   32     | expr • EG expr
   33     | expr • NEG expr
   34     | expr • OU expr
   35     | expr • ET expr

    OU     shift, and go to state 43
    ET     shift, and go to state 44
    INF    shift, and go to state 45
    INFEG  shift, and go to state 46
    SUP    shift, and go to state 47
    SUPEG  shift, and go to state 48
    EG     shift, and go to state 49
    NEG    shift, and go to state 50
    '+'    shift, and go to state 51
    '-'    shift, and go to state 52
    '*'    shift, and go to state 53
    '/'    shift, and go to state 54
    '}'    shift, and go to state 79


State 76

   37 expr: CALL '{' VARNAME '}' • '{' lexpr '}'

    '{'  shift, and go to state 80


State 77

   11 instr: IF '{' expr '}' if block_instr • else fi FI
   12      | IF '{' expr '}' if block_instr • ELSE else block_instr fi FI

    ELSE  shift, and go to state 81

    $default  reduce using rule 15 (else)

    else  go to state 82


State 78

   13 instr: DOWHILE begin_while '{' expr '}' while • block_instr elihw OD

    SET      shift, and go to state 16
    RETURN   shift, and go to state 17
    IF       shift, and go to state 18
    DOWHILE  shift, and go to state 19

    block_instr  go to state 83
    instr        go to state 21


State 79

    9 instr: SET '{' VARNAME '}' '{' expr '}' •

    $default  reduce using rule 9 (instr)


State 80

   37 expr: CALL '{' VARNAME '}' '{' • lexpr '}'

    NUMBER   shift, and go to state 29
    VARNAME  shift, and go to state 30
    VRAI     shift, and go to state 31
    FAUX     shift, and go to state 32
    CALL     shift, and go to state 33
    NON      shift, and go to state 34
    '('      shift, and go to state 35

    expr      go to state 84
    lexpr     go to state 85
    tmp_expr  go to state 86


State 81

   12 instr: IF '{' expr '}' if block_instr ELSE • else block_instr fi FI

    $default  reduce using rule 15 (else)

    else  go to state 87


State 82

   11 instr: IF '{' expr '}' if block_instr else • fi FI

    $default  reduce using rule 16 (fi)

    fi  go to state 88


State 83

   13 instr: DOWHILE begin_while '{' expr '}' while block_instr • elihw OD

    $default  reduce using rule 19 (elihw)

    elihw  go to state 89


State 84

   22 expr: expr • '+' expr
   23     | expr • '-' expr
   24     | expr • '*' expr
   25     | expr • '/' expr
   28     | expr • INF expr
   29     | expr • INFEG expr
   30     | expr • SUP expr
   31     | expr • SUPEG expr
   32     | expr • EG expr
   33     | expr • NEG expr
   34     | expr • OU expr
   35     | expr • ET expr
   41 tmp_expr: expr •

    OU     shift, and go to state 43
    ET     shift, and go to state 44
    INF    shift, and go to state 45
    INFEG  shift, and go to state 46
    SUP    shift, and go to state 47
    SUPEG  shift, and go to state 48
    EG     shift, and go to state 49
    NEG    shift, and go to state 50
    '+'    shift, and go to state 51
    '-'    shift, and go to state 52
    '*'    shift, and go to state 53
    '/'    shift, and go to state 54

    $default  reduce using rule 41 (tmp_expr)


State 85

   37 expr: CALL '{' VARNAME '}' '{' lexpr • '}'

    '}'  shift, and go to state 90


State 86

   39 lexpr: tmp_expr •
   40      | tmp_expr • ',' lexpr

    ','  shift, and go to state 91

    $default  reduce using rule 39 (lexpr)


State 87

   12 instr: IF '{' expr '}' if block_instr ELSE else • block_instr fi FI

    SET      shift, and go to state 16
    RETURN   shift, and go to state 17
    IF       shift, and go to state 18
    DOWHILE  shift, and go to state 19

    block_instr  go to state 92
    instr        go to state 21


State 88

   11 instr: IF '{' expr '}' if block_instr else fi • FI

    FI  shift, and go to state 93


State 89

   13 instr: DOWHILE begin_while '{' expr '}' while block_instr elihw • OD

    OD  shift, and go to state 94


State 90

   37 expr: CALL '{' VARNAME '}' '{' lexpr '}' •

    $default  reduce using rule 37 (expr)


State 91

   40 lexpr: tmp_expr ',' • lexpr

    NUMBER   shift, and go to state 29
    VARNAME  shift, and go to state 30
    VRAI     shift, and go to state 31
    FAUX     shift, and go to state 32
    CALL     shift, and go to state 33
    NON      shift, and go to state 34
    '('      shift, and go to state 35

    expr      go to state 84
    lexpr     go to state 95
    tmp_expr  go to state 86


State 92

   12 instr: IF '{' expr '}' if block_instr ELSE else block_instr • fi FI

    $default  reduce using rule 16 (fi)

    fi  go to state 96


State 93

   11 instr: IF '{' expr '}' if block_instr else fi FI •

    $default  reduce using rule 11 (instr)


State 94

   13 instr: DOWHILE begin_while '{' expr '}' while block_instr elihw OD •

    $default  reduce using rule 13 (instr)


State 95

   40 lexpr: tmp_expr ',' lexpr •

    $default  reduce using rule 40 (lexpr)


State 96

   12 instr: IF '{' expr '}' if block_instr ELSE else block_instr fi • FI

    FI  shift, and go to state 97


State 97

   12 instr: IF '{' expr '}' if block_instr ELSE else block_instr fi FI •

    $default  reduce using rule 12 (instr)
