Terminals unused in grammar

    DOFORI
    OU
    ET
    INF
    INFEG
    EG
    NEG
    NON


Grammar

    0 $accept: algo $end

    1 $@1: ε

    2 $@2: ε

    3 algo: DEB '{' VARNAME '}' $@1 '{' lparam '}' $@2 block_instr FIN

    4 block_instr: instr
    5            | instr block_instr

    6 lparam: ε
    7       | param
    8       | param ',' lparam

    9 param: VARNAME

   10 instr: SET '{' VARNAME '}' '{' expr '}'
   11      | IF '{' expr '}' if block_instr else fi FI
   12      | IF '{' expr '}' if block_instr ELSE else block_instr fi FI
   13      | DOWHILE begin_while '{' expr '}' while block_instr fwhile OD
   14      | RETURN '{' expr '}'

   15 if: ε

   16 else: ε

   17 fi: ε

   18 begin_while: ε

   19 while: ε

   20 fwhile: ε

   21 expr: VARNAME
   22     | NUMBER
   23     | expr '+' expr
   24     | expr '-' expr
   25     | expr '*' expr
   26     | expr '/' expr
   27     | VRAI
   28     | FAUX
   29     | CALL '{' VARNAME '}' '{' lexpr '}'
   30     | '(' expr ')'

   31 lexpr: tmp_expr
   32      | tmp_expr ',' lexpr

   33 tmp_expr: expr


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 30
    ')' (41) 30
    '*' (42) 25
    '+' (43) 23
    ',' (44) 8 32
    '-' (45) 24
    '/' (47) 26
    '{' (123) 3 10 11 12 13 14 29
    '}' (125) 3 10 11 12 13 14 29
    error (256)
    NUMBER <integer> (258) 22
    VARNAME <var_name> (259) 3 9 10 21 29
    DEB (260) 3
    FIN (261) 3
    SET (262) 10
    RETURN (263) 14
    IF (264) 11 12
    FI (265) 11 12
    ELSE (266) 12
    DOWHILE (267) 13
    OD (268) 13
    DOFORI (269)
    OU (270)
    ET (271)
    INF (272)
    INFEG (273)
    VRAI (274) 27
    FAUX (275) 28
    EG (276)
    NEG (277)
    CALL (278) 29
    NON (279)


Nonterminals, with rules where they appear

    $accept (34)
        on left: 0
    algo (35)
        on left: 3
        on right: 0
    $@1 (36)
        on left: 1
        on right: 3
    $@2 (37)
        on left: 2
        on right: 3
    block_instr (38)
        on left: 4 5
        on right: 3 5 11 12 13
    lparam (39)
        on left: 6 7 8
        on right: 3 8
    param (40)
        on left: 9
        on right: 7 8
    instr <s> (41)
        on left: 10 11 12 13 14
        on right: 4 5
    if (42)
        on left: 15
        on right: 11 12
    else (43)
        on left: 16
        on right: 11 12
    fi (44)
        on left: 17
        on right: 11 12
    begin_while (45)
        on left: 18
        on right: 13
    while (46)
        on left: 19
        on right: 13
    fwhile (47)
        on left: 20
        on right: 13
    expr <s> (48)
        on left: 21 22 23 24 25 26 27 28 29 30
        on right: 10 11 12 13 14 23 24 25 26 30 33
    lexpr (49)
        on left: 31 32
        on right: 29 32
    tmp_expr (50)
        on left: 33
        on right: 31 32


State 0

    0 $accept: • algo $end

    DEB  shift, and go to state 1

    algo  go to state 2


State 1

    3 algo: DEB • '{' VARNAME '}' $@1 '{' lparam '}' $@2 block_instr FIN

    '{'  shift, and go to state 3


State 2

    0 $accept: algo • $end

    $end  shift, and go to state 4


State 3

    3 algo: DEB '{' • VARNAME '}' $@1 '{' lparam '}' $@2 block_instr FIN

    VARNAME  shift, and go to state 5


State 4

    0 $accept: algo $end •

    $default  accept


State 5

    3 algo: DEB '{' VARNAME • '}' $@1 '{' lparam '}' $@2 block_instr FIN

    '}'  shift, and go to state 6


State 6

    3 algo: DEB '{' VARNAME '}' • $@1 '{' lparam '}' $@2 block_instr FIN

    $default  reduce using rule 1 ($@1)

    $@1  go to state 7


State 7

    3 algo: DEB '{' VARNAME '}' $@1 • '{' lparam '}' $@2 block_instr FIN

    '{'  shift, and go to state 8


State 8

    3 algo: DEB '{' VARNAME '}' $@1 '{' • lparam '}' $@2 block_instr FIN

    VARNAME  shift, and go to state 9

    $default  reduce using rule 6 (lparam)

    lparam  go to state 10
    param   go to state 11


State 9

    9 param: VARNAME •

    $default  reduce using rule 9 (param)


State 10

    3 algo: DEB '{' VARNAME '}' $@1 '{' lparam • '}' $@2 block_instr FIN

    '}'  shift, and go to state 12


State 11

    7 lparam: param •
    8       | param • ',' lparam

    ','  shift, and go to state 13

    $default  reduce using rule 7 (lparam)


State 12

    3 algo: DEB '{' VARNAME '}' $@1 '{' lparam '}' • $@2 block_instr FIN

    $default  reduce using rule 2 ($@2)

    $@2  go to state 14


State 13

    8 lparam: param ',' • lparam

    VARNAME  shift, and go to state 9

    $default  reduce using rule 6 (lparam)

    lparam  go to state 15
    param   go to state 11


State 14

    3 algo: DEB '{' VARNAME '}' $@1 '{' lparam '}' $@2 • block_instr FIN

    SET      shift, and go to state 16
    RETURN   shift, and go to state 17
    IF       shift, and go to state 18
    DOWHILE  shift, and go to state 19

    block_instr  go to state 20
    instr        go to state 21


State 15

    8 lparam: param ',' lparam •

    $default  reduce using rule 8 (lparam)


State 16

   10 instr: SET • '{' VARNAME '}' '{' expr '}'

    '{'  shift, and go to state 22


State 17

   14 instr: RETURN • '{' expr '}'

    '{'  shift, and go to state 23


State 18

   11 instr: IF • '{' expr '}' if block_instr else fi FI
   12      | IF • '{' expr '}' if block_instr ELSE else block_instr fi FI

    '{'  shift, and go to state 24


State 19

   13 instr: DOWHILE • begin_while '{' expr '}' while block_instr fwhile OD

    $default  reduce using rule 18 (begin_while)

    begin_while  go to state 25


State 20

    3 algo: DEB '{' VARNAME '}' $@1 '{' lparam '}' $@2 block_instr • FIN

    FIN  shift, and go to state 26


State 21

    4 block_instr: instr •
    5            | instr • block_instr

    SET      shift, and go to state 16
    RETURN   shift, and go to state 17
    IF       shift, and go to state 18
    DOWHILE  shift, and go to state 19

    $default  reduce using rule 4 (block_instr)

    block_instr  go to state 27
    instr        go to state 21


State 22

   10 instr: SET '{' • VARNAME '}' '{' expr '}'

    VARNAME  shift, and go to state 28


State 23

   14 instr: RETURN '{' • expr '}'

    NUMBER   shift, and go to state 29
    VARNAME  shift, and go to state 30
    VRAI     shift, and go to state 31
    FAUX     shift, and go to state 32
    CALL     shift, and go to state 33
    '('      shift, and go to state 34

    expr  go to state 35


State 24

   11 instr: IF '{' • expr '}' if block_instr else fi FI
   12      | IF '{' • expr '}' if block_instr ELSE else block_instr fi FI

    NUMBER   shift, and go to state 29
    VARNAME  shift, and go to state 30
    VRAI     shift, and go to state 31
    FAUX     shift, and go to state 32
    CALL     shift, and go to state 33
    '('      shift, and go to state 34

    expr  go to state 36


State 25

   13 instr: DOWHILE begin_while • '{' expr '}' while block_instr fwhile OD

    '{'  shift, and go to state 37


State 26

    3 algo: DEB '{' VARNAME '}' $@1 '{' lparam '}' $@2 block_instr FIN •

    $default  reduce using rule 3 (algo)


State 27

    5 block_instr: instr block_instr •

    $default  reduce using rule 5 (block_instr)


State 28

   10 instr: SET '{' VARNAME • '}' '{' expr '}'

    '}'  shift, and go to state 38


State 29

   22 expr: NUMBER •

    $default  reduce using rule 22 (expr)


State 30

   21 expr: VARNAME •

    $default  reduce using rule 21 (expr)


State 31

   27 expr: VRAI •

    $default  reduce using rule 27 (expr)


State 32

   28 expr: FAUX •

    $default  reduce using rule 28 (expr)


State 33

   29 expr: CALL • '{' VARNAME '}' '{' lexpr '}'

    '{'  shift, and go to state 39


State 34

   30 expr: '(' • expr ')'

    NUMBER   shift, and go to state 29
    VARNAME  shift, and go to state 30
    VRAI     shift, and go to state 31
    FAUX     shift, and go to state 32
    CALL     shift, and go to state 33
    '('      shift, and go to state 34

    expr  go to state 40


State 35

   14 instr: RETURN '{' expr • '}'
   23 expr: expr • '+' expr
   24     | expr • '-' expr
   25     | expr • '*' expr
   26     | expr • '/' expr

    '+'  shift, and go to state 41
    '-'  shift, and go to state 42
    '*'  shift, and go to state 43
    '/'  shift, and go to state 44
    '}'  shift, and go to state 45


State 36

   11 instr: IF '{' expr • '}' if block_instr else fi FI
   12      | IF '{' expr • '}' if block_instr ELSE else block_instr fi FI
   23 expr: expr • '+' expr
   24     | expr • '-' expr
   25     | expr • '*' expr
   26     | expr • '/' expr

    '+'  shift, and go to state 41
    '-'  shift, and go to state 42
    '*'  shift, and go to state 43
    '/'  shift, and go to state 44
    '}'  shift, and go to state 46


State 37

   13 instr: DOWHILE begin_while '{' • expr '}' while block_instr fwhile OD

    NUMBER   shift, and go to state 29
    VARNAME  shift, and go to state 30
    VRAI     shift, and go to state 31
    FAUX     shift, and go to state 32
    CALL     shift, and go to state 33
    '('      shift, and go to state 34

    expr  go to state 47


State 38

   10 instr: SET '{' VARNAME '}' • '{' expr '}'

    '{'  shift, and go to state 48


State 39

   29 expr: CALL '{' • VARNAME '}' '{' lexpr '}'

    VARNAME  shift, and go to state 49


State 40

   23 expr: expr • '+' expr
   24     | expr • '-' expr
   25     | expr • '*' expr
   26     | expr • '/' expr
   30     | '(' expr • ')'

    '+'  shift, and go to state 41
    '-'  shift, and go to state 42
    '*'  shift, and go to state 43
    '/'  shift, and go to state 44
    ')'  shift, and go to state 50


State 41

   23 expr: expr '+' • expr

    NUMBER   shift, and go to state 29
    VARNAME  shift, and go to state 30
    VRAI     shift, and go to state 31
    FAUX     shift, and go to state 32
    CALL     shift, and go to state 33
    '('      shift, and go to state 34

    expr  go to state 51


State 42

   24 expr: expr '-' • expr

    NUMBER   shift, and go to state 29
    VARNAME  shift, and go to state 30
    VRAI     shift, and go to state 31
    FAUX     shift, and go to state 32
    CALL     shift, and go to state 33
    '('      shift, and go to state 34

    expr  go to state 52


State 43

   25 expr: expr '*' • expr

    NUMBER   shift, and go to state 29
    VARNAME  shift, and go to state 30
    VRAI     shift, and go to state 31
    FAUX     shift, and go to state 32
    CALL     shift, and go to state 33
    '('      shift, and go to state 34

    expr  go to state 53


State 44

   26 expr: expr '/' • expr

    NUMBER   shift, and go to state 29
    VARNAME  shift, and go to state 30
    VRAI     shift, and go to state 31
    FAUX     shift, and go to state 32
    CALL     shift, and go to state 33
    '('      shift, and go to state 34

    expr  go to state 54


State 45

   14 instr: RETURN '{' expr '}' •

    $default  reduce using rule 14 (instr)


State 46

   11 instr: IF '{' expr '}' • if block_instr else fi FI
   12      | IF '{' expr '}' • if block_instr ELSE else block_instr fi FI

    $default  reduce using rule 15 (if)

    if  go to state 55


State 47

   13 instr: DOWHILE begin_while '{' expr • '}' while block_instr fwhile OD
   23 expr: expr • '+' expr
   24     | expr • '-' expr
   25     | expr • '*' expr
   26     | expr • '/' expr

    '+'  shift, and go to state 41
    '-'  shift, and go to state 42
    '*'  shift, and go to state 43
    '/'  shift, and go to state 44
    '}'  shift, and go to state 56


State 48

   10 instr: SET '{' VARNAME '}' '{' • expr '}'

    NUMBER   shift, and go to state 29
    VARNAME  shift, and go to state 30
    VRAI     shift, and go to state 31
    FAUX     shift, and go to state 32
    CALL     shift, and go to state 33
    '('      shift, and go to state 34

    expr  go to state 57


State 49

   29 expr: CALL '{' VARNAME • '}' '{' lexpr '}'

    '}'  shift, and go to state 58


State 50

   30 expr: '(' expr ')' •

    $default  reduce using rule 30 (expr)


State 51

   23 expr: expr • '+' expr
   23     | expr '+' expr •
   24     | expr • '-' expr
   25     | expr • '*' expr
   26     | expr • '/' expr

    '*'  shift, and go to state 43
    '/'  shift, and go to state 44

    $default  reduce using rule 23 (expr)


State 52

   23 expr: expr • '+' expr
   24     | expr • '-' expr
   24     | expr '-' expr •
   25     | expr • '*' expr
   26     | expr • '/' expr

    '*'  shift, and go to state 43
    '/'  shift, and go to state 44

    $default  reduce using rule 24 (expr)


State 53

   23 expr: expr • '+' expr
   24     | expr • '-' expr
   25     | expr • '*' expr
   25     | expr '*' expr •
   26     | expr • '/' expr

    $default  reduce using rule 25 (expr)


State 54

   23 expr: expr • '+' expr
   24     | expr • '-' expr
   25     | expr • '*' expr
   26     | expr • '/' expr
   26     | expr '/' expr •

    $default  reduce using rule 26 (expr)


State 55

   11 instr: IF '{' expr '}' if • block_instr else fi FI
   12      | IF '{' expr '}' if • block_instr ELSE else block_instr fi FI

    SET      shift, and go to state 16
    RETURN   shift, and go to state 17
    IF       shift, and go to state 18
    DOWHILE  shift, and go to state 19

    block_instr  go to state 59
    instr        go to state 21


State 56

   13 instr: DOWHILE begin_while '{' expr '}' • while block_instr fwhile OD

    $default  reduce using rule 19 (while)

    while  go to state 60


State 57

   10 instr: SET '{' VARNAME '}' '{' expr • '}'
   23 expr: expr • '+' expr
   24     | expr • '-' expr
   25     | expr • '*' expr
   26     | expr • '/' expr

    '+'  shift, and go to state 41
    '-'  shift, and go to state 42
    '*'  shift, and go to state 43
    '/'  shift, and go to state 44
    '}'  shift, and go to state 61


State 58

   29 expr: CALL '{' VARNAME '}' • '{' lexpr '}'

    '{'  shift, and go to state 62


State 59

   11 instr: IF '{' expr '}' if block_instr • else fi FI
   12      | IF '{' expr '}' if block_instr • ELSE else block_instr fi FI

    ELSE  shift, and go to state 63

    $default  reduce using rule 16 (else)

    else  go to state 64


State 60

   13 instr: DOWHILE begin_while '{' expr '}' while • block_instr fwhile OD

    SET      shift, and go to state 16
    RETURN   shift, and go to state 17
    IF       shift, and go to state 18
    DOWHILE  shift, and go to state 19

    block_instr  go to state 65
    instr        go to state 21


State 61

   10 instr: SET '{' VARNAME '}' '{' expr '}' •

    $default  reduce using rule 10 (instr)


State 62

   29 expr: CALL '{' VARNAME '}' '{' • lexpr '}'

    NUMBER   shift, and go to state 29
    VARNAME  shift, and go to state 30
    VRAI     shift, and go to state 31
    FAUX     shift, and go to state 32
    CALL     shift, and go to state 33
    '('      shift, and go to state 34

    expr      go to state 66
    lexpr     go to state 67
    tmp_expr  go to state 68


State 63

   12 instr: IF '{' expr '}' if block_instr ELSE • else block_instr fi FI

    $default  reduce using rule 16 (else)

    else  go to state 69


State 64

   11 instr: IF '{' expr '}' if block_instr else • fi FI

    $default  reduce using rule 17 (fi)

    fi  go to state 70


State 65

   13 instr: DOWHILE begin_while '{' expr '}' while block_instr • fwhile OD

    $default  reduce using rule 20 (fwhile)

    fwhile  go to state 71


State 66

   23 expr: expr • '+' expr
   24     | expr • '-' expr
   25     | expr • '*' expr
   26     | expr • '/' expr
   33 tmp_expr: expr •

    '+'  shift, and go to state 41
    '-'  shift, and go to state 42
    '*'  shift, and go to state 43
    '/'  shift, and go to state 44

    $default  reduce using rule 33 (tmp_expr)


State 67

   29 expr: CALL '{' VARNAME '}' '{' lexpr • '}'

    '}'  shift, and go to state 72


State 68

   31 lexpr: tmp_expr •
   32      | tmp_expr • ',' lexpr

    ','  shift, and go to state 73

    $default  reduce using rule 31 (lexpr)


State 69

   12 instr: IF '{' expr '}' if block_instr ELSE else • block_instr fi FI

    SET      shift, and go to state 16
    RETURN   shift, and go to state 17
    IF       shift, and go to state 18
    DOWHILE  shift, and go to state 19

    block_instr  go to state 74
    instr        go to state 21


State 70

   11 instr: IF '{' expr '}' if block_instr else fi • FI

    FI  shift, and go to state 75


State 71

   13 instr: DOWHILE begin_while '{' expr '}' while block_instr fwhile • OD

    OD  shift, and go to state 76


State 72

   29 expr: CALL '{' VARNAME '}' '{' lexpr '}' •

    $default  reduce using rule 29 (expr)


State 73

   32 lexpr: tmp_expr ',' • lexpr

    NUMBER   shift, and go to state 29
    VARNAME  shift, and go to state 30
    VRAI     shift, and go to state 31
    FAUX     shift, and go to state 32
    CALL     shift, and go to state 33
    '('      shift, and go to state 34

    expr      go to state 66
    lexpr     go to state 77
    tmp_expr  go to state 68


State 74

   12 instr: IF '{' expr '}' if block_instr ELSE else block_instr • fi FI

    $default  reduce using rule 17 (fi)

    fi  go to state 78


State 75

   11 instr: IF '{' expr '}' if block_instr else fi FI •

    $default  reduce using rule 11 (instr)


State 76

   13 instr: DOWHILE begin_while '{' expr '}' while block_instr fwhile OD •

    $default  reduce using rule 13 (instr)


State 77

   32 lexpr: tmp_expr ',' lexpr •

    $default  reduce using rule 32 (lexpr)


State 78

   12 instr: IF '{' expr '}' if block_instr ELSE else block_instr fi • FI

    FI  shift, and go to state 79


State 79

   12 instr: IF '{' expr '}' if block_instr ELSE else block_instr fi FI •

    $default  reduce using rule 12 (instr)
