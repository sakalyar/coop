// _start
// Return size: 0
define _start
_start_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000002260
l0000000000002260:
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	r9 = rdx
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdx = rsp
	__align(rsp)
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rax
	v11 = rsp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = v11
	r8 = 0x0000000000005EB0<p64>
	rcx = 0x0000000000005E40<p64>
	rdi = 0x0000000000005837<p64>
	eax = __libc_start_main(rdi, rsi, rdx, rcx, r8, r9, Mem0[rsp:(ptr64 void)])
	__hlt()
_start_exit:


// __gmon_start__
// Return size: 8
define __gmon_start__
__gmon_start___entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000002290
l0000000000002290:
	eax = Mem0[0x00000000000092E8<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00000000000022A0
	// succ:  l000000000000229E l00000000000022A0
l000000000000229E:
	return
	// succ:  __gmon_start___exit
l00000000000022A0:
	rsp = rsp - 8<64>
	SCZO = cond(rsp)
	rdi = 0x0000000000002260<p64>
	rsi = 0x0000000000005EE1<p64>
	Mem0[0x00000000000092E8<p64>:word32] = 1<32>
	call fn00000000000021C0 (retsize: 8;)
	rdi = _mcleanup
	rsp = rsp + 8<64>
	SCZO = cond(rsp)
	// succ:  l00000000000022CC_thunk_atexit
l00000000000022CC_thunk_atexit:
	call atexit (retsize: 0;)
	return
	// succ:  __gmon_start___exit
__gmon_start___exit:


// _dl_relocate_static_pie
// Return size: 8
define _dl_relocate_static_pie
_dl_relocate_static_pie_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l00000000000022E0
l00000000000022E0:
	return
	// succ:  _dl_relocate_static_pie_exit
_dl_relocate_static_pie_exit:


// deregister_tm_clones
// Return size: 8
define deregister_tm_clones
deregister_tm_clones_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l00000000000022F0
l00000000000022F0:
	rdi = 0x00000000000092C0<p64>
	rax = 0x00000000000092C0<p64>
	SCZO = cond(rax - rdi)
	branch Test(EQ,Z) l0000000000002318
	// succ:  l0000000000002303 l0000000000002318
l0000000000002303:
	rax = _ITM_deregisterTMCloneTable
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000002318
	// succ:  l000000000000230F l0000000000002318
l000000000000230F:
	call rax (retsize: 0;)
	return
	// succ:  deregister_tm_clones_exit
l0000000000002318:
	return
	// succ:  deregister_tm_clones_exit
deregister_tm_clones_exit:


// register_tm_clones
// Return size: 0
define register_tm_clones
register_tm_clones_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000002320
l0000000000002320:
	rdi = 0x00000000000092C0<p64>
	rsi = 0x00000000000092C0<p64>
	rsi = rsi - rdi
	SCZO = cond(rsi)
	rax = rsi
	rsi = rsi >>u 0x3F<64>
	SCZO = cond(rsi)
	rax = rax >> 3<64>
	SCZO = cond(rax)
	rsi = rsi + rax
	SCZO = cond(rsi)
	rsi = rsi >> 1<64>
	SCZO = cond(rsi)
	branch Test(EQ,Z) l0000000000002358
	// succ:  l0000000000002344 l0000000000002358
l0000000000002344:
	rax = _ITM_registerTMCloneTable
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000002358
	// succ:  l0000000000002350 l0000000000002358
l0000000000002350:
	call rax (retsize: 0;)
	return
	// succ:  register_tm_clones_exit
l0000000000002358:
	return
	// succ:  register_tm_clones_exit
register_tm_clones_exit:


// __do_global_dtors_aux
// Return size: 8
define __do_global_dtors_aux
__do_global_dtors_aux_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000002360
l0000000000002360:
	SCZO = cond(Mem0[0x00000000000092EC<p64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000002398
	// succ:  l000000000000236D l0000000000002398
l000000000000236D:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	SCZO = cond(__cxa_finalize - 0<64>)
	rbp = rsp
	branch Test(EQ,Z) l0000000000002387
	// succ:  l000000000000237B l0000000000002387
l000000000000237B:
	rdi = Mem0[0x0000000000009008<p64>:word64]
	call fn0000000000002140 (retsize: 8;)
	// succ:  l0000000000002387
l0000000000002387:
	call deregister_tm_clones (retsize: 8;)
	Mem0[0x00000000000092EC<p64>:byte] = 1<8>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  __do_global_dtors_aux_exit
l0000000000002398:
	return
	// succ:  __do_global_dtors_aux_exit
__do_global_dtors_aux_exit:


// frame_dummy
// Return size: 8
define frame_dummy
frame_dummy_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l00000000000023A0
l00000000000023A0:
	// succ:  l00000000000023A0_thunk_register_tm_clones
l00000000000023A0_thunk_register_tm_clones:
	call register_tm_clones (retsize: 0;)
	return
	// succ:  frame_dummy_exit
frame_dummy_exit:


// setCarry
// Return size: 8
define setCarry
setCarry_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l00000000000023A9
l00000000000023A9:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x10<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	Mem0[rbp - 4<64>:word32] = edi
	SCZO = cond(Mem0[rbp - 4<64>:word32] - 0<32>)
	branch Test(EQ,Z) l00000000000023CC
	// succ:  l00000000000023C4 l00000000000023CC
l00000000000023C4:
	SCZO = cond(Mem0[rbp - 4<64>:word32] - 1<32>)
	branch Test(EQ,Z) l00000000000023DD
	// succ:  l00000000000023CA l00000000000023DD
l00000000000023CA:
	goto l00000000000023EE
	// succ:  l00000000000023EE
l00000000000023CC:
	eax = Mem0[0x0000000000009304<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 0xFFFFFFFD<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[0x0000000000009304<p64>:word32] = eax
	goto l0000000000002416
	// succ:  l0000000000002416
l00000000000023DD:
	eax = Mem0[0x0000000000009304<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax | 2<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[0x0000000000009304<p64>:word32] = eax
	goto l0000000000002416
	// succ:  l0000000000002416
l00000000000023EE:
	rax = Mem0[0x00000000000092E0<p64>:word64]
	edx = Mem0[rbp - 4<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rsi = 0x00000000000060F8<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	call fn0000000000002230 (retsize: 8;)
	// succ:  l0000000000002416
l0000000000002416:
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  setCarry_exit
setCarry_exit:


// setError
// Return size: 8
define setError
setError_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000002419
l0000000000002419:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x10<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	Mem0[rbp - 4<64>:word32] = edi
	SCZO = cond(Mem0[rbp - 4<64>:word32] - 0<32>)
	branch Test(EQ,Z) l000000000000243C
	// succ:  l0000000000002434 l000000000000243C
l0000000000002434:
	SCZO = cond(Mem0[rbp - 4<64>:word32] - 1<32>)
	branch Test(EQ,Z) l000000000000244D
	// succ:  l000000000000243A l000000000000244D
l000000000000243A:
	goto l000000000000245E
	// succ:  l000000000000245E
l000000000000243C:
	eax = Mem0[0x0000000000009304<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 0xFFFFFFFE<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[0x0000000000009304<p64>:word32] = eax
	goto l0000000000002486
	// succ:  l0000000000002486
l000000000000244D:
	eax = Mem0[0x0000000000009304<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax | 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[0x0000000000009304<p64>:word32] = eax
	goto l0000000000002486
	// succ:  l0000000000002486
l000000000000245E:
	rax = Mem0[0x00000000000092E0<p64>:word64]
	edx = Mem0[rbp - 4<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rsi = 0x0000000000006120<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	call fn0000000000002230 (retsize: 8;)
	// succ:  l0000000000002486
l0000000000002486:
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  setError_exit
setError_exit:


// setZero
// Return size: 8
define setZero
setZero_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000002489
l0000000000002489:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x10<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	Mem0[rbp - 4<64>:word32] = edi
	SCZO = cond(Mem0[rbp - 4<64>:word32] - 0<32>)
	branch Test(EQ,Z) l00000000000024AC
	// succ:  l00000000000024A4 l00000000000024AC
l00000000000024A4:
	SCZO = cond(Mem0[rbp - 4<64>:word32] - 1<32>)
	branch Test(EQ,Z) l00000000000024BD
	// succ:  l00000000000024AA l00000000000024BD
l00000000000024AA:
	goto l00000000000024CE
	// succ:  l00000000000024CE
l00000000000024AC:
	eax = Mem0[0x0000000000009304<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 0xFFFFFFFB<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[0x0000000000009304<p64>:word32] = eax
	goto l00000000000024F6
	// succ:  l00000000000024F6
l00000000000024BD:
	eax = Mem0[0x0000000000009304<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax | 4<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[0x0000000000009304<p64>:word32] = eax
	goto l00000000000024F6
	// succ:  l00000000000024F6
l00000000000024CE:
	rax = Mem0[0x00000000000092E0<p64>:word64]
	edx = Mem0[rbp - 4<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rsi = 0x0000000000006148<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	call fn0000000000002230 (retsize: 8;)
	// succ:  l00000000000024F6
l00000000000024F6:
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  setZero_exit
setZero_exit:


// getCarry
// Return size: 8
define getCarry
getCarry_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l00000000000024F9
l00000000000024F9:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	call mcount (retsize: 8;)
	eax = Mem0[0x0000000000009304<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 2<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(eax & eax)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  getCarry_exit
getCarry_exit:


// getError
// Return size: 8
define getError
getError_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l000000000000251A
l000000000000251A:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	call mcount (retsize: 8;)
	eax = Mem0[0x0000000000009304<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(eax & eax)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  getError_exit
getError_exit:


// getZero
// Return size: 8
define getZero
getZero_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l000000000000253B
l000000000000253B:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	call mcount (retsize: 8;)
	eax = Mem0[0x0000000000009304<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 4<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(eax & eax)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  getZero_exit
getZero_exit:


// registerSgn
// Return size: 8
define registerSgn
registerSgn_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l000000000000255C
l000000000000255C:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 8<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	Mem0[rbp - 4<64>:word32] = edi
	eax = Mem0[rbp - 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 0x8000<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000002584
	// succ:  l000000000000257D l0000000000002584
l000000000000257D:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000002589
	// succ:  l0000000000002589
l0000000000002584:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000002589
l0000000000002589:
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  registerSgn_exit
registerSgn_exit:


// registerToLongInt
// Return size: 8
define registerToLongInt
registerToLongInt_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l000000000000258B
l000000000000258B:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x18<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	Mem0[rbp - 0x14<64>:word32] = edi
	eax = Mem0[rbp - 0x14<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call registerSgn (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NS,S) l00000000000025B7
	// succ:  l00000000000025AE l00000000000025B7
l00000000000025AE:
	rax = 0xFFFFFFFFFFFFFFFF<64>
	goto l00000000000025BC
	// succ:  l00000000000025BC
l00000000000025B7:
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000000025BC
l00000000000025BC:
	Mem0[rbp - 8<64>:word64] = rax
	Mem0[rbp - 0xC<64>:word32] = 0xE<32>
	goto l00000000000025E6
	// succ:  l00000000000025E6
l00000000000025C9:
	v12 = Mem0[rbp - 8<64>:word64] << 1<64>
	Mem0[rbp - 8<64>:word64] = v12
	SCZO = cond(v12)
	eax = Mem0[rbp - 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = Mem0[rbp - 0x14<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	edx = edx >>u cl
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	eax = eax
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	v18 = Mem0[rbp - 8<64>:word64] | rax
	Mem0[rbp - 8<64>:word64] = v18
	SZO = cond(Mem0[rbp - 8<64>:word64])
	C = false
	v19 = Mem0[rbp - 0xC<64>:word32] - 1<32>
	Mem0[rbp - 0xC<64>:word32] = v19
	SCZO = cond(v19)
	// succ:  l00000000000025E6
l00000000000025E6:
	SCZO = cond(Mem0[rbp - 0xC<64>:word32] - 0<32>)
	branch Test(NS,S) l00000000000025C9
	// succ:  l00000000000025EC l00000000000025C9
l00000000000025EC:
	rax = Mem0[rbp - 8<64>:word64]
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  registerToLongInt_exit
registerToLongInt_exit:


// longIntToRegister
// Return size: 8
define longIntToRegister
longIntToRegister_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l00000000000025F2
l00000000000025F2:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 8<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	Mem0[rbp - 8<64>:word64] = rdi
	rax = Mem0[rbp - 8<64>:word64]
	eax = CONVERT(ax, word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  longIntToRegister_exit
longIntToRegister_exit:


// shiftr_f
// Return size: 8
define shiftr_f
shiftr_f_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000002611
l0000000000002611:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x10<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	rax = Mem0[fs:0x28<32>:word64]
	Mem0[rbp - 8<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 9<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l0000000000002695
	// succ:  l0000000000002651 l0000000000002695
l0000000000002651:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l0000000000002695
	// succ:  l0000000000002659 l0000000000002695
l0000000000002659:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l0000000000002695
	// succ:  l0000000000002661 l0000000000002695
l0000000000002661:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l0000000000002695
	// succ:  l0000000000002669 l0000000000002695
l0000000000002669:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = 0x0000000000006170<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000000271C
	// succ:  l000000000000271C
l0000000000002695:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rdx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call setCarry (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setZero (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setError (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	edx = Mem0[rdx + rax:word32]
	rdx = CONVERT(edx, word32, uint64)
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = edx
	rcx = CONVERT(ecx, word32, uint64)
	ecx = ecx >>u 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	Mem0[rdx + rax:word32] = ecx
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x0000000000009300<p64>:word32] = eax
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000000271C
l000000000000271C:
	rsi = Mem0[rbp - 8<64>:word64]
	rsi = rsi ^ Mem0[fs:0x28<32>:word64]
	SZO = cond(rsi)
	C = false
	branch Test(EQ,Z) l0000000000002730
	// succ:  l000000000000272B l0000000000002730
l000000000000272B:
	call fn0000000000002170 (retsize: 8;)
	// succ:  l0000000000002730
l0000000000002730:
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  shiftr_f_exit
shiftr_f_exit:


// shiftl_f
// Return size: 8
define shiftl_f
shiftl_f_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000002732
l0000000000002732:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x10<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	rax = Mem0[fs:0x28<32>:word64]
	Mem0[rbp - 8<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 9<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l00000000000027B6
	// succ:  l0000000000002772 l00000000000027B6
l0000000000002772:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l00000000000027B6
	// succ:  l000000000000277A l00000000000027B6
l000000000000277A:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l00000000000027B6
	// succ:  l0000000000002782 l00000000000027B6
l0000000000002782:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l00000000000027B6
	// succ:  l000000000000278A l00000000000027B6
l000000000000278A:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = 0x00000000000061A8<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000002842
	// succ:  l0000000000002842
l00000000000027B6:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rdx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 0x8000<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call setCarry (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setZero (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setError (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rdx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	ecx = SLICE(rax + rax, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	eax = CONVERT(cx, word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rdx = CONVERT(edx, word32, int64)
	rcx = CONVERT(0<32> + rdx * 4<64>, word32, word64)
	rdx = 0x0000000000009300<p64>
	Mem0[rcx + rdx:word32] = eax
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x0000000000009300<p64>:word32] = eax
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000002842
l0000000000002842:
	rsi = Mem0[rbp - 8<64>:word64]
	rsi = rsi ^ Mem0[fs:0x28<32>:word64]
	SZO = cond(rsi)
	C = false
	branch Test(EQ,Z) l0000000000002856
	// succ:  l0000000000002851 l0000000000002856
l0000000000002851:
	call fn0000000000002170 (retsize: 8;)
	// succ:  l0000000000002856
l0000000000002856:
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  shiftl_f_exit
shiftl_f_exit:


// and_f
// Return size: 8
define and_f
and_f_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000002858
l0000000000002858:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x10<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	rax = Mem0[fs:0x28<32>:word64]
	Mem0[rbp - 8<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 0xA<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 2<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 9<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l00000000000028C7
	// succ:  l00000000000028AF l00000000000028C7
l00000000000028AF:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l00000000000028C7
	// succ:  l00000000000028B7 l00000000000028C7
l00000000000028B7:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l00000000000028C7
	// succ:  l00000000000028BF l00000000000028C7
l00000000000028BF:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(NE,Z) l00000000000028E7
	// succ:  l00000000000028C7 l00000000000028E7
l00000000000028C7:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l000000000000291A
	// succ:  l00000000000028CF l000000000000291A
l00000000000028CF:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l000000000000291A
	// succ:  l00000000000028D7 l000000000000291A
l00000000000028D7:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l000000000000291A
	// succ:  l00000000000028DF l000000000000291A
l00000000000028DF:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l000000000000291A
	// succ:  l00000000000028E7 l000000000000291A
l00000000000028E7:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = CONVERT(al, byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = 0x00000000000061E0<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000000299F
	// succ:  l000000000000299F
l000000000000291A:
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setCarry (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setZero (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setError (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	ecx = Mem0[rdx + rax:word32]
	rcx = CONVERT(ecx, word32, uint64)
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	edx = Mem0[rdx + rax:word32]
	rdx = CONVERT(edx, word32, uint64)
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = ecx & edx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	Mem0[rdx + rax:word32] = ecx
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 3<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x0000000000009300<p64>:word32] = eax
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000000299F
l000000000000299F:
	rsi = Mem0[rbp - 8<64>:word64]
	rsi = rsi ^ Mem0[fs:0x28<32>:word64]
	SZO = cond(rsi)
	C = false
	branch Test(EQ,Z) l00000000000029B3
	// succ:  l00000000000029AE l00000000000029B3
l00000000000029AE:
	call fn0000000000002170 (retsize: 8;)
	// succ:  l00000000000029B3
l00000000000029B3:
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  and_f_exit
and_f_exit:


// or_f
// Return size: 8
define or_f
or_f_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l00000000000029B5
l00000000000029B5:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x10<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	rax = Mem0[fs:0x28<32>:word64]
	Mem0[rbp - 8<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 0xA<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 2<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 9<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l0000000000002A24
	// succ:  l0000000000002A0C l0000000000002A24
l0000000000002A0C:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l0000000000002A24
	// succ:  l0000000000002A14 l0000000000002A24
l0000000000002A14:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l0000000000002A24
	// succ:  l0000000000002A1C l0000000000002A24
l0000000000002A1C:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(NE,Z) l0000000000002A44
	// succ:  l0000000000002A24 l0000000000002A44
l0000000000002A24:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l0000000000002A77
	// succ:  l0000000000002A2C l0000000000002A77
l0000000000002A2C:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l0000000000002A77
	// succ:  l0000000000002A34 l0000000000002A77
l0000000000002A34:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l0000000000002A77
	// succ:  l0000000000002A3C l0000000000002A77
l0000000000002A3C:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l0000000000002A77
	// succ:  l0000000000002A44 l0000000000002A77
l0000000000002A44:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = CONVERT(al, byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = 0x0000000000006218<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000002AFC
	// succ:  l0000000000002AFC
l0000000000002A77:
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setCarry (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setZero (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setError (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	ecx = Mem0[rdx + rax:word32]
	rcx = CONVERT(ecx, word32, uint64)
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	edx = Mem0[rdx + rax:word32]
	rdx = CONVERT(edx, word32, uint64)
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = ecx | edx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	Mem0[rdx + rax:word32] = ecx
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 3<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x0000000000009300<p64>:word32] = eax
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000002AFC
l0000000000002AFC:
	rsi = Mem0[rbp - 8<64>:word64]
	rsi = rsi ^ Mem0[fs:0x28<32>:word64]
	SZO = cond(rsi)
	C = false
	branch Test(EQ,Z) l0000000000002B10
	// succ:  l0000000000002B0B l0000000000002B10
l0000000000002B0B:
	call fn0000000000002170 (retsize: 8;)
	// succ:  l0000000000002B10
l0000000000002B10:
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  or_f_exit
or_f_exit:


// xor_f
// Return size: 8
define xor_f
xor_f_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000002B12
l0000000000002B12:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x10<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	rax = Mem0[fs:0x28<32>:word64]
	Mem0[rbp - 8<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 0xA<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 2<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 9<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l0000000000002B81
	// succ:  l0000000000002B69 l0000000000002B81
l0000000000002B69:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l0000000000002B81
	// succ:  l0000000000002B71 l0000000000002B81
l0000000000002B71:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l0000000000002B81
	// succ:  l0000000000002B79 l0000000000002B81
l0000000000002B79:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(NE,Z) l0000000000002BA1
	// succ:  l0000000000002B81 l0000000000002BA1
l0000000000002B81:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l0000000000002BD4
	// succ:  l0000000000002B89 l0000000000002BD4
l0000000000002B89:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l0000000000002BD4
	// succ:  l0000000000002B91 l0000000000002BD4
l0000000000002B91:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l0000000000002BD4
	// succ:  l0000000000002B99 l0000000000002BD4
l0000000000002B99:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l0000000000002BD4
	// succ:  l0000000000002BA1 l0000000000002BD4
l0000000000002BA1:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = CONVERT(al, byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = 0x0000000000006250<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000002C59
	// succ:  l0000000000002C59
l0000000000002BD4:
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setCarry (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setZero (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setError (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	ecx = Mem0[rdx + rax:word32]
	rcx = CONVERT(ecx, word32, uint64)
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	edx = Mem0[rdx + rax:word32]
	rdx = CONVERT(edx, word32, uint64)
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = ecx ^ edx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	Mem0[rdx + rax:word32] = ecx
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 3<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x0000000000009300<p64>:word32] = eax
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000002C59
l0000000000002C59:
	rsi = Mem0[rbp - 8<64>:word64]
	rsi = rsi ^ Mem0[fs:0x28<32>:word64]
	SZO = cond(rsi)
	C = false
	branch Test(EQ,Z) l0000000000002C6D
	// succ:  l0000000000002C68 l0000000000002C6D
l0000000000002C68:
	call fn0000000000002170 (retsize: 8;)
	// succ:  l0000000000002C6D
l0000000000002C6D:
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  xor_f_exit
xor_f_exit:


// not_f
// Return size: 8
define not_f
not_f_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000002C6F
l0000000000002C6F:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x10<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	rax = Mem0[fs:0x28<32>:word64]
	Mem0[rbp - 8<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 9<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l0000000000002CF0
	// succ:  l0000000000002CAF l0000000000002CF0
l0000000000002CAF:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l0000000000002CF0
	// succ:  l0000000000002CB7 l0000000000002CF0
l0000000000002CB7:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l0000000000002CF0
	// succ:  l0000000000002CBF l0000000000002CF0
l0000000000002CBF:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l0000000000002CF0
	// succ:  l0000000000002CC7 l0000000000002CF0
l0000000000002CC7:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = 0x0000000000006288<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000002D5C
	// succ:  l0000000000002D5C
l0000000000002CF0:
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setCarry (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setError (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	edx = Mem0[rdx + rax:word32]
	rdx = CONVERT(edx, word32, uint64)
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = edx
	rcx = CONVERT(ecx, word32, uint64)
	ecx = ~ecx
	rcx = CONVERT(ecx, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	Mem0[rdx + rax:word32] = ecx
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setZero (retsize: 8;)
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x0000000000009300<p64>:word32] = eax
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000002D5C
l0000000000002D5C:
	rsi = Mem0[rbp - 8<64>:word64]
	rsi = rsi ^ Mem0[fs:0x28<32>:word64]
	SZO = cond(rsi)
	C = false
	branch Test(EQ,Z) l0000000000002D70
	// succ:  l0000000000002D6B l0000000000002D70
l0000000000002D6B:
	call fn0000000000002170 (retsize: 8;)
	// succ:  l0000000000002D70
l0000000000002D70:
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  not_f_exit
not_f_exit:


// add_internal
// Return size: 8
define add_internal
add_internal_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000002D72
l0000000000002D72:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	Mem0[rbp - 0x20<64>:word64] = rdi
	Mem0[rbp - 0x28<64>:word64] = rsi
	Mem0[rbp - 0x30<64>:word64] = rdx
	Mem0[rbp - 0x38<64>:word64] = rcx
	Mem0[rbp - 0x40<64>:word64] = r8
	Mem0[rbp - 0x18<64>:word32] = 0<32>
	Mem0[rbp - 0x14<64>:word32] = 0<32>
	Mem0[rbp - 0x10<64>:word32] = 0<32>
	goto l0000000000002E22
	// succ:  l0000000000002E22
l0000000000002DB0:
	rax = Mem0[rbp - 0x20<64>:word64]
	edx = Mem0[rax:word32]
	rdx = CONVERT(edx, word32, uint64)
	eax = Mem0[rbp - 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	esi = edx
	rsi = CONVERT(esi, word32, uint64)
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	esi = esi >>u cl
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	rax = Mem0[rbp - 0x28<64>:word64]
	edx = Mem0[rax:word32]
	rdx = CONVERT(edx, word32, uint64)
	eax = Mem0[rbp - 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	edx = edx >>u cl
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	eax = eax ^ esi
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = eax & 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = eax ^ Mem0[rbp - 0x18<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	eax = Mem0[rbp - 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	edx = edx << cl
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	v23 = Mem0[rbp - 0x14<64>:word32] | eax
	Mem0[rbp - 0x14<64>:word32] = v23
	SZO = cond(Mem0[rbp - 0x14<64>:word32])
	C = false
	rax = Mem0[rbp - 0x20<64>:word64]
	edx = Mem0[rax:word32]
	rdx = CONVERT(edx, word32, uint64)
	eax = Mem0[rbp - 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	edx = edx >>u cl
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	esi = eax
	rsi = CONVERT(esi, word32, uint64)
	rax = Mem0[rbp - 0x28<64>:word64]
	edx = Mem0[rax:word32]
	rdx = CONVERT(edx, word32, uint64)
	eax = Mem0[rbp - 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	edx = edx >>u cl
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	edx = SLICE(rsi + rax, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	eax = Mem0[rbp - 0x18<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + edx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(eax - 1<32>)
	al = CONVERT(Test(UGT,CZ), bool, int8)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp - 0x18<64>:word32] = eax
	v25 = Mem0[rbp - 0x10<64>:word32] + 1<32>
	Mem0[rbp - 0x10<64>:word32] = v25
	SCZO = cond(v25)
	// succ:  l0000000000002E22
l0000000000002E22:
	SCZO = cond(Mem0[rbp - 0x10<64>:word32] - 0xF<32>)
	branch Test(ULE,CZ) l0000000000002DB0
	// succ:  l0000000000002E28 l0000000000002DB0
l0000000000002E28:
	rax = Mem0[rbp - 0x20<64>:word64]
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call registerSgn (retsize: 8;)
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	rax = Mem0[rbp - 0x28<64>:word64]
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call registerSgn (retsize: 8;)
	SCZO = cond(ebx - eax)
	branch Test(NE,Z) l0000000000002EB1
	// succ:  l0000000000002E48 l0000000000002EB1
l0000000000002E48:
	rax = Mem0[rbp - 0x20<64>:word64]
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call registerSgn (retsize: 8;)
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	eax = Mem0[rbp - 0x14<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call registerSgn (retsize: 8;)
	SCZO = cond(ebx - eax)
	branch Test(EQ,Z) l0000000000002E71
	// succ:  l0000000000002E65 l0000000000002E71
l0000000000002E65:
	rax = Mem0[rbp - 0x40<64>:word64]
	Mem0[rax:word32] = 1<32>
	goto l0000000000002EBB
	// succ:  l0000000000002EBB
l0000000000002E71:
	rax = Mem0[rbp - 0x20<64>:word64]
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax >>u 0xF<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp - 0x28<64>:word64]
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax >>u 0xF<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = edx ^ eax
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	eax = Mem0[rbp - 0x14<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax >>u 0xF<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax ^ edx
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = eax & 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(eax & eax)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp - 0xC<64>:word32] = eax
	eax = Mem0[rbp - 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - Mem0[rbp - 0x18<64>:word32])
	al = CONVERT(Test(NE,Z), bool, int8)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp - 0x40<64>:word64]
	Mem0[rax:word32] = edx
	goto l0000000000002EBB
	// succ:  l0000000000002EBB
l0000000000002EB1:
	rax = Mem0[rbp - 0x40<64>:word64]
	Mem0[rax:word32] = 0<32>
	// succ:  l0000000000002EBB
l0000000000002EBB:
	edx = Mem0[rbp - 0x18<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp - 0x30<64>:word64]
	Mem0[rax:word32] = edx
	SCZO = cond(Mem0[rbp - 0x14<64>:word32] - 0<32>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp - 0x38<64>:word64]
	Mem0[rax:word32] = edx
	rax = Mem0[rbp - 0x20<64>:word64]
	edx = Mem0[rbp - 0x14<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rax:word32] = edx
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  add_internal_exit
add_internal_exit:


// add_f
// Return size: 8
define add_f
add_f_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000002EE5
l0000000000002EE5:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	rax = Mem0[fs:0x28<32>:word64]
	Mem0[rbp - 8<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 0x16<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 2<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 0x15<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 0x16<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l0000000000002F64
	// succ:  l0000000000002F3C l0000000000002F64
l0000000000002F3C:
	eax = CONVERT(Mem0[rbp - 0x16<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l0000000000002F64
	// succ:  l0000000000002F44 l0000000000002F64
l0000000000002F44:
	eax = CONVERT(Mem0[rbp - 0x16<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l0000000000002F64
	// succ:  l0000000000002F4C l0000000000002F64
l0000000000002F4C:
	eax = CONVERT(Mem0[rbp - 0x16<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l0000000000002F64
	// succ:  l0000000000002F54 l0000000000002F64
l0000000000002F54:
	eax = CONVERT(Mem0[rbp - 0x16<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 2<8>)
	branch Test(EQ,Z) l0000000000002F64
	// succ:  l0000000000002F5C l0000000000002F64
l0000000000002F5C:
	eax = CONVERT(Mem0[rbp - 0x16<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 3<8>)
	branch Test(NE,Z) l0000000000002F94
	// succ:  l0000000000002F64 l0000000000002F94
l0000000000002F64:
	eax = CONVERT(Mem0[rbp - 0x15<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l0000000000002FC7
	// succ:  l0000000000002F6C l0000000000002FC7
l0000000000002F6C:
	eax = CONVERT(Mem0[rbp - 0x15<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l0000000000002FC7
	// succ:  l0000000000002F74 l0000000000002FC7
l0000000000002F74:
	eax = CONVERT(Mem0[rbp - 0x15<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l0000000000002FC7
	// succ:  l0000000000002F7C l0000000000002FC7
l0000000000002F7C:
	eax = CONVERT(Mem0[rbp - 0x15<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l0000000000002FC7
	// succ:  l0000000000002F84 l0000000000002FC7
l0000000000002F84:
	eax = CONVERT(Mem0[rbp - 0x15<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 2<8>)
	branch Test(EQ,Z) l0000000000002FC7
	// succ:  l0000000000002F8C l0000000000002FC7
l0000000000002F8C:
	eax = CONVERT(Mem0[rbp - 0x15<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 3<8>)
	branch Test(EQ,Z) l0000000000002FC7
	// succ:  l0000000000002F94 l0000000000002FC7
l0000000000002F94:
	eax = CONVERT(Mem0[rbp - 0x15<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = CONVERT(al, byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	eax = CONVERT(Mem0[rbp - 0x16<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = 0x00000000000062B8<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000000304B
	// succ:  l000000000000304B
l0000000000002FC7:
	eax = CONVERT(Mem0[rbp - 0x15<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	rsi = rdx + rax
	eax = CONVERT(Mem0[rbp - 0x16<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	rdi = rdx + rax
	rcx = rbp - 0xC<64>
	rdx = rbp - 0x10<64>
	rax = rbp - 0x14<64>
	r8 = rcx
	rcx = rdx
	rdx = rax
	call add_internal (retsize: 8;)
	eax = Mem0[rbp - 0x14<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call setCarry (retsize: 8;)
	eax = Mem0[rbp - 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call setZero (retsize: 8;)
	eax = Mem0[rbp - 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call setError (retsize: 8;)
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 3<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x0000000000009300<p64>:word32] = eax
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000000304B
l000000000000304B:
	rcx = Mem0[rbp - 8<64>:word64]
	rcx = rcx ^ Mem0[fs:0x28<32>:word64]
	SZO = cond(rcx)
	C = false
	branch Test(EQ,Z) l000000000000305F
	// succ:  l000000000000305A l000000000000305F
l000000000000305A:
	call fn0000000000002170 (retsize: 8;)
	// succ:  l000000000000305F
l000000000000305F:
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  add_f_exit
add_f_exit:


// sub_f
// Return size: 8
define sub_f
sub_f_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000003061
l0000000000003061:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	rax = Mem0[fs:0x28<32>:word64]
	Mem0[rbp - 0x18<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 0x32<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 2<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 0x31<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 0x32<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l00000000000030E1
	// succ:  l00000000000030B9 l00000000000030E1
l00000000000030B9:
	eax = CONVERT(Mem0[rbp - 0x32<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l00000000000030E1
	// succ:  l00000000000030C1 l00000000000030E1
l00000000000030C1:
	eax = CONVERT(Mem0[rbp - 0x32<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l00000000000030E1
	// succ:  l00000000000030C9 l00000000000030E1
l00000000000030C9:
	eax = CONVERT(Mem0[rbp - 0x32<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l00000000000030E1
	// succ:  l00000000000030D1 l00000000000030E1
l00000000000030D1:
	eax = CONVERT(Mem0[rbp - 0x32<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 2<8>)
	branch Test(EQ,Z) l00000000000030E1
	// succ:  l00000000000030D9 l00000000000030E1
l00000000000030D9:
	eax = CONVERT(Mem0[rbp - 0x32<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 3<8>)
	branch Test(NE,Z) l0000000000003111
	// succ:  l00000000000030E1 l0000000000003111
l00000000000030E1:
	eax = CONVERT(Mem0[rbp - 0x31<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l0000000000003144
	// succ:  l00000000000030E9 l0000000000003144
l00000000000030E9:
	eax = CONVERT(Mem0[rbp - 0x31<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l0000000000003144
	// succ:  l00000000000030F1 l0000000000003144
l00000000000030F1:
	eax = CONVERT(Mem0[rbp - 0x31<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l0000000000003144
	// succ:  l00000000000030F9 l0000000000003144
l00000000000030F9:
	eax = CONVERT(Mem0[rbp - 0x31<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l0000000000003144
	// succ:  l0000000000003101 l0000000000003144
l0000000000003101:
	eax = CONVERT(Mem0[rbp - 0x31<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 2<8>)
	branch Test(EQ,Z) l0000000000003144
	// succ:  l0000000000003109 l0000000000003144
l0000000000003109:
	eax = CONVERT(Mem0[rbp - 0x31<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 3<8>)
	branch Test(EQ,Z) l0000000000003144
	// succ:  l0000000000003111 l0000000000003144
l0000000000003111:
	eax = CONVERT(Mem0[rbp - 0x31<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = CONVERT(al, byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	eax = CONVERT(Mem0[rbp - 0x32<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = 0x00000000000062F0<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000003419
	// succ:  l0000000000003419
l0000000000003144:
	eax = CONVERT(Mem0[rbp - 0x31<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rdx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp - 0x1C<64>:word32] = eax
	eax = CONVERT(Mem0[rbp - 0x31<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rdx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call registerToLongInt (retsize: 8;)
	SCZO = cond(rax - 0xFFFFFFFFFFFF8000<64>)
	branch Test(NE,Z) l000000000000332E
	// succ:  l0000000000003190 l000000000000332E
l0000000000003190:
	eax = CONVERT(Mem0[rbp - 0x32<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rdx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call registerToLongInt (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(SG,S) l00000000000031DA
	// succ:  l00000000000031B7 l00000000000031DA
l00000000000031B7:
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setZero (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setCarry (retsize: 8;)
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	call setError (retsize: 8;)
	goto l00000000000033E7
	// succ:  l00000000000033E7
l00000000000031DA:
	eax = CONVERT(Mem0[rbp - 0x32<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rdx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp - 0x30<64>:word32] = eax
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	call longIntToRegister (retsize: 8;)
	Mem0[rbp - 0x2C<64>:word32] = eax
	rdi = rbp - 0x20<64>
	rcx = rbp - 0x28<64>
	rdx = rbp - 0x24<64>
	rsi = rbp - 0x2C<64>
	rax = rbp - 0x30<64>
	r8 = rdi
	rdi = rax
	call add_internal (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 0x32<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	eax = Mem0[rbp - 0x30<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = CONVERT(edx, word32, int64)
	rcx = CONVERT(0<32> + rdx * 4<64>, word32, word64)
	rdx = 0x0000000000009300<p64>
	Mem0[rcx + rdx:word32] = eax
	eax = CONVERT(Mem0[rbp - 0x31<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rdx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp - 0x30<64>:word32] = eax
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	call longIntToRegister (retsize: 8;)
	Mem0[rbp - 0x2C<64>:word32] = eax
	rdi = rbp - 0x20<64>
	rcx = rbp - 0x28<64>
	rdx = rbp - 0x24<64>
	rsi = rbp - 0x2C<64>
	rax = rbp - 0x30<64>
	r8 = rdi
	rdi = rax
	call add_internal (retsize: 8;)
	eax = Mem0[rbp - 0x30<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax
	rax = CONVERT(eax, word32, uint64)
	rax = -rax
	SCZO = cond(rax)
	C = rax == 0<64>
	edx = CONVERT(Mem0[rbp - 0x31<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	ebx = CONVERT(dl, byte, word32)
	rbx = CONVERT(ebx, word32, uint64)
	rdi = rax
	call longIntToRegister (retsize: 8;)
	rdx = CONVERT(ebx, word32, int64)
	rcx = CONVERT(0<32> + rdx * 4<64>, word32, word64)
	rdx = 0x0000000000009300<p64>
	Mem0[rcx + rdx:word32] = eax
	eax = CONVERT(Mem0[rbp - 0x31<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	rsi = rdx + rax
	eax = CONVERT(Mem0[rbp - 0x32<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	rdi = rdx + rax
	rcx = rbp - 0x20<64>
	rdx = rbp - 0x28<64>
	rax = rbp - 0x24<64>
	r8 = rcx
	rcx = rdx
	rdx = rax
	call add_internal (retsize: 8;)
	eax = Mem0[rbp - 0x24<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call setCarry (retsize: 8;)
	eax = Mem0[rbp - 0x28<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call setZero (retsize: 8;)
	eax = Mem0[rbp - 0x20<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call setError (retsize: 8;)
	goto l00000000000033E7
	// succ:  l00000000000033E7
l000000000000332E:
	eax = CONVERT(Mem0[rbp - 0x31<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rdx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call registerToLongInt (retsize: 8;)
	rax = -rax
	SCZO = cond(rax)
	C = rax == 0<64>
	edx = CONVERT(Mem0[rbp - 0x31<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	ebx = CONVERT(dl, byte, word32)
	rbx = CONVERT(ebx, word32, uint64)
	rdi = rax
	call longIntToRegister (retsize: 8;)
	rdx = CONVERT(ebx, word32, int64)
	rcx = CONVERT(0<32> + rdx * 4<64>, word32, word64)
	rdx = 0x0000000000009300<p64>
	Mem0[rcx + rdx:word32] = eax
	eax = CONVERT(Mem0[rbp - 0x31<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	rsi = rdx + rax
	eax = CONVERT(Mem0[rbp - 0x32<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	rdi = rdx + rax
	rcx = rbp - 0x20<64>
	rdx = rbp - 0x28<64>
	rax = rbp - 0x24<64>
	r8 = rcx
	rcx = rdx
	rdx = rax
	call add_internal (retsize: 8;)
	eax = Mem0[rbp - 0x24<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call setCarry (retsize: 8;)
	eax = Mem0[rbp - 0x28<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call setZero (retsize: 8;)
	eax = Mem0[rbp - 0x20<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call setError (retsize: 8;)
	// succ:  l00000000000033E7
l00000000000033E7:
	eax = CONVERT(Mem0[rbp - 0x31<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rcx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rdx = 0x0000000000009300<p64>
	eax = Mem0[rbp - 0x1C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rcx + rdx:word32] = eax
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 3<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x0000000000009300<p64>:word32] = eax
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000003419
l0000000000003419:
	rbx = Mem0[rbp - 0x18<64>:word64]
	rbx = rbx ^ Mem0[fs:0x28<32>:word64]
	SZO = cond(rbx)
	C = false
	branch Test(EQ,Z) l000000000000342D
	// succ:  l0000000000003428 l000000000000342D
l0000000000003428:
	call fn0000000000002170 (retsize: 8;)
	// succ:  l000000000000342D
l000000000000342D:
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  sub_f_exit
sub_f_exit:


// mul_f
// Return size: 8
define mul_f
mul_f_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000003434
l0000000000003434:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	rax = Mem0[fs:0x28<32>:word64]
	Mem0[rbp - 0x18<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 0x2A<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 2<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 0x29<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 0x2A<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l00000000000034A4
	// succ:  l000000000000348C l00000000000034A4
l000000000000348C:
	eax = CONVERT(Mem0[rbp - 0x2A<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l00000000000034A4
	// succ:  l0000000000003494 l00000000000034A4
l0000000000003494:
	eax = CONVERT(Mem0[rbp - 0x2A<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l00000000000034A4
	// succ:  l000000000000349C l00000000000034A4
l000000000000349C:
	eax = CONVERT(Mem0[rbp - 0x2A<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(NE,Z) l00000000000034C4
	// succ:  l00000000000034A4 l00000000000034C4
l00000000000034A4:
	eax = CONVERT(Mem0[rbp - 0x29<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l00000000000034F7
	// succ:  l00000000000034AC l00000000000034F7
l00000000000034AC:
	eax = CONVERT(Mem0[rbp - 0x29<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l00000000000034F7
	// succ:  l00000000000034B4 l00000000000034F7
l00000000000034B4:
	eax = CONVERT(Mem0[rbp - 0x29<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l00000000000034F7
	// succ:  l00000000000034BC l00000000000034F7
l00000000000034BC:
	eax = CONVERT(Mem0[rbp - 0x29<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l00000000000034F7
	// succ:  l00000000000034C4 l00000000000034F7
l00000000000034C4:
	eax = CONVERT(Mem0[rbp - 0x29<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = CONVERT(al, byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	eax = CONVERT(Mem0[rbp - 0x2A<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = 0x0000000000006328<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	goto l00000000000035CF
	// succ:  l00000000000035CF
l00000000000034F7:
	eax = CONVERT(Mem0[rbp - 0x2A<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rdx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call registerToLongInt (retsize: 8;)
	Mem0[rbp - 0x28<64>:word64] = rax
	eax = CONVERT(Mem0[rbp - 0x29<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rdx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call registerToLongInt (retsize: 8;)
	Mem0[rbp - 0x20<64>:word64] = rax
	rax = Mem0[rbp - 0x28<64>:word64]
	rax = rax *s Mem0[rbp - 0x20<64>:word64]
	SCZO = cond(rax)
	Mem0[rbp - 0x28<64>:word64] = rax
	eax = CONVERT(Mem0[rbp - 0x2A<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ebx = CONVERT(al, byte, word32)
	rbx = CONVERT(ebx, word32, uint64)
	rax = Mem0[rbp - 0x28<64>:word64]
	rdi = rax
	call longIntToRegister (retsize: 8;)
	rdx = CONVERT(ebx, word32, int64)
	rcx = CONVERT(0<32> + rdx * 4<64>, word32, word64)
	rdx = 0x0000000000009300<p64>
	Mem0[rcx + rdx:word32] = eax
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setCarry (retsize: 8;)
	SCZO = cond(Mem0[rbp - 0x28<64>:word64] - 0<64>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call setZero (retsize: 8;)
	SCZO = cond(Mem0[rbp - 0x28<64>:word64] - 0xFFFFFFFFFFFF8000<64>)
	branch Test(LT,SO) l00000000000035A8
	// succ:  l000000000000359E l00000000000035A8
l000000000000359E:
	SCZO = cond(Mem0[rbp - 0x28<64>:word64] - 0x7FFF<64>)
	branch Test(LE,SZO) l00000000000035AF
	// succ:  l00000000000035A8 l00000000000035AF
l00000000000035A8:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l00000000000035B4
	// succ:  l00000000000035B4
l00000000000035AF:
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000000035B4
l00000000000035B4:
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call setError (retsize: 8;)
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 3<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x0000000000009300<p64>:word32] = eax
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000000035CF
l00000000000035CF:
	rbx = Mem0[rbp - 0x18<64>:word64]
	rbx = rbx ^ Mem0[fs:0x28<32>:word64]
	SZO = cond(rbx)
	C = false
	branch Test(EQ,Z) l00000000000035E3
	// succ:  l00000000000035DE l00000000000035E3
l00000000000035DE:
	call fn0000000000002170 (retsize: 8;)
	// succ:  l00000000000035E3
l00000000000035E3:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  mul_f_exit
mul_f_exit:


// div_f
// Return size: 8
define div_f
div_f_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l00000000000035EA
l00000000000035EA:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	rax = Mem0[fs:0x28<32>:word64]
	Mem0[rbp - 0x18<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 0x2E<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 2<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 0x2D<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 0x2E<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l000000000000365A
	// succ:  l0000000000003642 l000000000000365A
l0000000000003642:
	eax = CONVERT(Mem0[rbp - 0x2E<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l000000000000365A
	// succ:  l000000000000364A l000000000000365A
l000000000000364A:
	eax = CONVERT(Mem0[rbp - 0x2E<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l000000000000365A
	// succ:  l0000000000003652 l000000000000365A
l0000000000003652:
	eax = CONVERT(Mem0[rbp - 0x2E<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(NE,Z) l000000000000367A
	// succ:  l000000000000365A l000000000000367A
l000000000000365A:
	eax = CONVERT(Mem0[rbp - 0x2D<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l00000000000036AD
	// succ:  l0000000000003662 l00000000000036AD
l0000000000003662:
	eax = CONVERT(Mem0[rbp - 0x2D<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l00000000000036AD
	// succ:  l000000000000366A l00000000000036AD
l000000000000366A:
	eax = CONVERT(Mem0[rbp - 0x2D<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l00000000000036AD
	// succ:  l0000000000003672 l00000000000036AD
l0000000000003672:
	eax = CONVERT(Mem0[rbp - 0x2D<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l00000000000036AD
	// succ:  l000000000000367A l00000000000036AD
l000000000000367A:
	eax = CONVERT(Mem0[rbp - 0x2D<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = CONVERT(al, byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	eax = CONVERT(Mem0[rbp - 0x2E<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = 0x0000000000006360<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000003873
	// succ:  l0000000000003873
l00000000000036AD:
	eax = CONVERT(Mem0[rbp - 0x2E<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rdx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call registerSgn (retsize: 8;)
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	eax = CONVERT(Mem0[rbp - 0x2D<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rdx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call registerSgn (retsize: 8;)
	SCZO = cond(ebx - eax)
	al = CONVERT(Test(EQ,Z), bool, int8)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp - 0x2C<64>:word32] = eax
	eax = CONVERT(Mem0[rbp - 0x2E<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rdx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call registerToLongInt (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(SG,S) l0000000000003749
	// succ:  l0000000000003725 l0000000000003749
l0000000000003725:
	eax = CONVERT(Mem0[rbp - 0x2E<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rdx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call registerToLongInt (retsize: 8;)
	goto l000000000000376E
	// succ:  l000000000000376E
l0000000000003749:
	eax = CONVERT(Mem0[rbp - 0x2E<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rdx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call registerToLongInt (retsize: 8;)
	rax = -rax
	SCZO = cond(rax)
	C = rax == 0<64>
	// succ:  l000000000000376E
l000000000000376E:
	Mem0[rbp - 0x28<64>:word64] = rax
	eax = CONVERT(Mem0[rbp - 0x2D<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rdx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call registerToLongInt (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(SG,S) l00000000000037BD
	// succ:  l0000000000003799 l00000000000037BD
l0000000000003799:
	eax = CONVERT(Mem0[rbp - 0x2D<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rdx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call registerToLongInt (retsize: 8;)
	goto l00000000000037E2
	// succ:  l00000000000037E2
l00000000000037BD:
	eax = CONVERT(Mem0[rbp - 0x2D<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rdx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call registerToLongInt (retsize: 8;)
	rax = -rax
	SCZO = cond(rax)
	C = rax == 0<64>
	// succ:  l00000000000037E2
l00000000000037E2:
	Mem0[rbp - 0x20<64>:word64] = rax
	SCZO = cond(Mem0[rbp - 0x20<64>:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000003839
	// succ:  l00000000000037ED l0000000000003839
l00000000000037ED:
	rax = Mem0[rbp - 0x28<64>:word64]
	rdx_rax = CONVERT(rax, int64, int128)
	v23 = rdx_rax
	rdx = CONVERT(v23 % Mem0[rbp - 0x20<64>:word64], int128, int64)
	rax = CONVERT(v23 /64 Mem0[rbp - 0x20<64>:word64], word64, int64)
	SCZO = cond(rax)
	Mem0[rbp - 0x28<64>:word64] = rax
	SCZO = cond(Mem0[rbp - 0x2C<64>:word32] - 0<32>)
	branch Test(NE,Z) l0000000000003805
	// succ:  l0000000000003801 l0000000000003805
l0000000000003801:
	v24 = -Mem0[rbp - 0x28<64>:word64]
	Mem0[rbp - 0x28<64>:word64] = v24
	SCZO = cond(v24)
	C = v24 == 0<64>
	// succ:  l0000000000003805
l0000000000003805:
	eax = CONVERT(Mem0[rbp - 0x2E<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ebx = CONVERT(al, byte, word32)
	rbx = CONVERT(ebx, word32, uint64)
	rax = Mem0[rbp - 0x28<64>:word64]
	rdi = rax
	call longIntToRegister (retsize: 8;)
	rdx = CONVERT(ebx, word32, int64)
	rcx = CONVERT(0<32> + rdx * 4<64>, word32, word64)
	rdx = 0x0000000000009300<p64>
	Mem0[rcx + rdx:word32] = eax
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setError (retsize: 8;)
	goto l0000000000003843
	// succ:  l0000000000003843
l0000000000003839:
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	call setError (retsize: 8;)
	// succ:  l0000000000003843
l0000000000003843:
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setCarry (retsize: 8;)
	SCZO = cond(Mem0[rbp - 0x28<64>:word64] - 0<64>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call setZero (retsize: 8;)
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 3<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x0000000000009300<p64>:word32] = eax
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000003873
l0000000000003873:
	rsi = Mem0[rbp - 0x18<64>:word64]
	rsi = rsi ^ Mem0[fs:0x28<32>:word64]
	SZO = cond(rsi)
	C = false
	branch Test(EQ,Z) l0000000000003887
	// succ:  l0000000000003882 l0000000000003887
l0000000000003882:
	call fn0000000000002170 (retsize: 8;)
	// succ:  l0000000000003887
l0000000000003887:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  div_f_exit
div_f_exit:


// cp_f
// Return size: 8
define cp_f
cp_f_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l000000000000388E
l000000000000388E:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x10<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	rax = Mem0[fs:0x28<32>:word64]
	Mem0[rbp - 8<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 0xA<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 2<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 9<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l000000000000390D
	// succ:  l00000000000038E5 l000000000000390D
l00000000000038E5:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l000000000000390D
	// succ:  l00000000000038ED l000000000000390D
l00000000000038ED:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l000000000000390D
	// succ:  l00000000000038F5 l000000000000390D
l00000000000038F5:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l000000000000390D
	// succ:  l00000000000038FD l000000000000390D
l00000000000038FD:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 2<8>)
	branch Test(EQ,Z) l000000000000390D
	// succ:  l0000000000003905 l000000000000390D
l0000000000003905:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 3<8>)
	branch Test(NE,Z) l000000000000393D
	// succ:  l000000000000390D l000000000000393D
l000000000000390D:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l000000000000396D
	// succ:  l0000000000003915 l000000000000396D
l0000000000003915:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l000000000000396D
	// succ:  l000000000000391D l000000000000396D
l000000000000391D:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l000000000000396D
	// succ:  l0000000000003925 l000000000000396D
l0000000000003925:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l000000000000396D
	// succ:  l000000000000392D l000000000000396D
l000000000000392D:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 2<8>)
	branch Test(EQ,Z) l000000000000396D
	// succ:  l0000000000003935 l000000000000396D
l0000000000003935:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 3<8>)
	branch Test(EQ,Z) l000000000000396D
	// succ:  l000000000000393D l000000000000396D
l000000000000393D:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = CONVERT(al, byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = 0x0000000000006398<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	goto l00000000000039D6
	// succ:  l00000000000039D6
l000000000000396D:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	edx = CONVERT(dl, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rcx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rcx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = CONVERT(edx, word32, int64)
	rcx = CONVERT(0<32> + rdx * 4<64>, word32, word64)
	rdx = 0x0000000000009300<p64>
	Mem0[rcx + rdx:word32] = eax
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setCarry (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setZero (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setError (retsize: 8;)
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 3<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x0000000000009300<p64>:word32] = eax
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000000039D6
l00000000000039D6:
	rsi = Mem0[rbp - 8<64>:word64]
	rsi = rsi ^ Mem0[fs:0x28<32>:word64]
	SZO = cond(rsi)
	C = false
	branch Test(EQ,Z) l00000000000039EA
	// succ:  l00000000000039E5 l00000000000039EA
l00000000000039E5:
	call fn0000000000002170 (retsize: 8;)
	// succ:  l00000000000039EA
l00000000000039EA:
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  cp_f_exit
cp_f_exit:


// loadw_f
// Return size: 8
define loadw_f
loadw_f_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l00000000000039EC
l00000000000039EC:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x10<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	rax = Mem0[fs:0x28<32>:word64]
	Mem0[rbp - 8<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 0xA<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 2<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 9<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l0000000000003A6B
	// succ:  l0000000000003A43 l0000000000003A6B
l0000000000003A43:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l0000000000003A6B
	// succ:  l0000000000003A4B l0000000000003A6B
l0000000000003A4B:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l0000000000003A6B
	// succ:  l0000000000003A53 l0000000000003A6B
l0000000000003A53:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l0000000000003A6B
	// succ:  l0000000000003A5B l0000000000003A6B
l0000000000003A5B:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 2<8>)
	branch Test(EQ,Z) l0000000000003A6B
	// succ:  l0000000000003A63 l0000000000003A6B
l0000000000003A63:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 3<8>)
	branch Test(NE,Z) l0000000000003A9B
	// succ:  l0000000000003A6B l0000000000003A9B
l0000000000003A6B:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l0000000000003ACB
	// succ:  l0000000000003A73 l0000000000003ACB
l0000000000003A73:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l0000000000003ACB
	// succ:  l0000000000003A7B l0000000000003ACB
l0000000000003A7B:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l0000000000003ACB
	// succ:  l0000000000003A83 l0000000000003ACB
l0000000000003A83:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l0000000000003ACB
	// succ:  l0000000000003A8B l0000000000003ACB
l0000000000003A8B:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 2<8>)
	branch Test(EQ,Z) l0000000000003ACB
	// succ:  l0000000000003A93 l0000000000003ACB
l0000000000003A93:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 3<8>)
	branch Test(EQ,Z) l0000000000003ACB
	// succ:  l0000000000003A9B l0000000000003ACB
l0000000000003A9B:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = CONVERT(al, byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = 0x00000000000063D0<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000003B3D
	// succ:  l0000000000003B3D
l0000000000003ACB:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	rdx = rdx + rax
	SCZO = cond(rdx)
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rcx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rcx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	rsi = rdx
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call readWord (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setCarry (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setZero (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setError (retsize: 8;)
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 3<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x0000000000009300<p64>:word32] = eax
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000003B3D
l0000000000003B3D:
	rsi = Mem0[rbp - 8<64>:word64]
	rsi = rsi ^ Mem0[fs:0x28<32>:word64]
	SZO = cond(rsi)
	C = false
	branch Test(EQ,Z) l0000000000003B51
	// succ:  l0000000000003B4C l0000000000003B51
l0000000000003B4C:
	call fn0000000000002170 (retsize: 8;)
	// succ:  l0000000000003B51
l0000000000003B51:
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  loadw_f_exit
loadw_f_exit:


// storew_f
// Return size: 8
define storew_f
storew_f_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000003B53
l0000000000003B53:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x10<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	rax = Mem0[fs:0x28<32>:word64]
	Mem0[rbp - 8<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 0xA<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 2<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 9<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l0000000000003BD2
	// succ:  l0000000000003BAA l0000000000003BD2
l0000000000003BAA:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l0000000000003BD2
	// succ:  l0000000000003BB2 l0000000000003BD2
l0000000000003BB2:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l0000000000003BD2
	// succ:  l0000000000003BBA l0000000000003BD2
l0000000000003BBA:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l0000000000003BD2
	// succ:  l0000000000003BC2 l0000000000003BD2
l0000000000003BC2:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 2<8>)
	branch Test(EQ,Z) l0000000000003BD2
	// succ:  l0000000000003BCA l0000000000003BD2
l0000000000003BCA:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 3<8>)
	branch Test(NE,Z) l0000000000003C02
	// succ:  l0000000000003BD2 l0000000000003C02
l0000000000003BD2:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l0000000000003C32
	// succ:  l0000000000003BDA l0000000000003C32
l0000000000003BDA:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l0000000000003C32
	// succ:  l0000000000003BE2 l0000000000003C32
l0000000000003BE2:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l0000000000003C32
	// succ:  l0000000000003BEA l0000000000003C32
l0000000000003BEA:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l0000000000003C32
	// succ:  l0000000000003BF2 l0000000000003C32
l0000000000003BF2:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 2<8>)
	branch Test(EQ,Z) l0000000000003C32
	// succ:  l0000000000003BFA l0000000000003C32
l0000000000003BFA:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 3<8>)
	branch Test(EQ,Z) l0000000000003C32
	// succ:  l0000000000003C02 l0000000000003C32
l0000000000003C02:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = CONVERT(al, byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = 0x0000000000006410<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000003CA3
	// succ:  l0000000000003CA3
l0000000000003C32:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	edx = Mem0[rdx + rax:word32]
	rdx = CONVERT(edx, word32, uint64)
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rcx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rcx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	esi = edx
	rsi = CONVERT(esi, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call writeWord (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setCarry (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setZero (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setError (retsize: 8;)
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 3<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x0000000000009300<p64>:word32] = eax
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000003CA3
l0000000000003CA3:
	rsi = Mem0[rbp - 8<64>:word64]
	rsi = rsi ^ Mem0[fs:0x28<32>:word64]
	SZO = cond(rsi)
	C = false
	branch Test(EQ,Z) l0000000000003CB7
	// succ:  l0000000000003CB2 l0000000000003CB7
l0000000000003CB2:
	call fn0000000000002170 (retsize: 8;)
	// succ:  l0000000000003CB7
l0000000000003CB7:
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  storew_f_exit
storew_f_exit:


// loadb_f
// Return size: 8
define loadb_f
loadb_f_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000003CB9
l0000000000003CB9:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x10<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	rax = Mem0[fs:0x28<32>:word64]
	Mem0[rbp - 8<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 0xA<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 2<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 9<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l0000000000003D38
	// succ:  l0000000000003D10 l0000000000003D38
l0000000000003D10:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l0000000000003D38
	// succ:  l0000000000003D18 l0000000000003D38
l0000000000003D18:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l0000000000003D38
	// succ:  l0000000000003D20 l0000000000003D38
l0000000000003D20:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l0000000000003D38
	// succ:  l0000000000003D28 l0000000000003D38
l0000000000003D28:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 2<8>)
	branch Test(EQ,Z) l0000000000003D38
	// succ:  l0000000000003D30 l0000000000003D38
l0000000000003D30:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 3<8>)
	branch Test(NE,Z) l0000000000003D68
	// succ:  l0000000000003D38 l0000000000003D68
l0000000000003D38:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l0000000000003D98
	// succ:  l0000000000003D40 l0000000000003D98
l0000000000003D40:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l0000000000003D98
	// succ:  l0000000000003D48 l0000000000003D98
l0000000000003D48:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l0000000000003D98
	// succ:  l0000000000003D50 l0000000000003D98
l0000000000003D50:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l0000000000003D98
	// succ:  l0000000000003D58 l0000000000003D98
l0000000000003D58:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 2<8>)
	branch Test(EQ,Z) l0000000000003D98
	// succ:  l0000000000003D60 l0000000000003D98
l0000000000003D60:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 3<8>)
	branch Test(EQ,Z) l0000000000003D98
	// succ:  l0000000000003D68 l0000000000003D98
l0000000000003D68:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = CONVERT(al, byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = 0x0000000000006450<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000003E16
	// succ:  l0000000000003E16
l0000000000003D98:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rdx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = rbp - 0xB<64>
	rsi = rdx
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 0xB<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	edx = CONVERT(dl, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rdx = CONVERT(edx, word32, int64)
	rcx = CONVERT(0<32> + rdx * 4<64>, word32, word64)
	rdx = 0x0000000000009300<p64>
	Mem0[rcx + rdx:word32] = eax
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setCarry (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setZero (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setError (retsize: 8;)
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 3<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x0000000000009300<p64>:word32] = eax
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000003E16
l0000000000003E16:
	rsi = Mem0[rbp - 8<64>:word64]
	rsi = rsi ^ Mem0[fs:0x28<32>:word64]
	SZO = cond(rsi)
	C = false
	branch Test(EQ,Z) l0000000000003E2A
	// succ:  l0000000000003E25 l0000000000003E2A
l0000000000003E25:
	call fn0000000000002170 (retsize: 8;)
	// succ:  l0000000000003E2A
l0000000000003E2A:
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  loadb_f_exit
loadb_f_exit:


// storeb_f
// Return size: 8
define storeb_f
storeb_f_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000003E2C
l0000000000003E2C:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x10<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	rax = Mem0[fs:0x28<32>:word64]
	Mem0[rbp - 8<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 0xA<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 2<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 9<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l0000000000003EAB
	// succ:  l0000000000003E83 l0000000000003EAB
l0000000000003E83:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l0000000000003EAB
	// succ:  l0000000000003E8B l0000000000003EAB
l0000000000003E8B:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l0000000000003EAB
	// succ:  l0000000000003E93 l0000000000003EAB
l0000000000003E93:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l0000000000003EAB
	// succ:  l0000000000003E9B l0000000000003EAB
l0000000000003E9B:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 2<8>)
	branch Test(EQ,Z) l0000000000003EAB
	// succ:  l0000000000003EA3 l0000000000003EAB
l0000000000003EA3:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 3<8>)
	branch Test(NE,Z) l0000000000003EDB
	// succ:  l0000000000003EAB l0000000000003EDB
l0000000000003EAB:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l0000000000003F0B
	// succ:  l0000000000003EB3 l0000000000003F0B
l0000000000003EB3:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l0000000000003F0B
	// succ:  l0000000000003EBB l0000000000003F0B
l0000000000003EBB:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l0000000000003F0B
	// succ:  l0000000000003EC3 l0000000000003F0B
l0000000000003EC3:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l0000000000003F0B
	// succ:  l0000000000003ECB l0000000000003F0B
l0000000000003ECB:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 2<8>)
	branch Test(EQ,Z) l0000000000003F0B
	// succ:  l0000000000003ED3 l0000000000003F0B
l0000000000003ED3:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 3<8>)
	branch Test(EQ,Z) l0000000000003F0B
	// succ:  l0000000000003EDB l0000000000003F0B
l0000000000003EDB:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = CONVERT(al, byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = 0x0000000000006490<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000003F7F
	// succ:  l0000000000003F7F
l0000000000003F0B:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rdx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rcx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rcx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	esi = edx
	rsi = CONVERT(esi, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call writeByte (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setCarry (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setZero (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setError (retsize: 8;)
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 3<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x0000000000009300<p64>:word32] = eax
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000003F7F
l0000000000003F7F:
	rsi = Mem0[rbp - 8<64>:word64]
	rsi = rsi ^ Mem0[fs:0x28<32>:word64]
	SZO = cond(rsi)
	C = false
	branch Test(EQ,Z) l0000000000003F93
	// succ:  l0000000000003F8E l0000000000003F93
l0000000000003F8E:
	call fn0000000000002170 (retsize: 8;)
	// succ:  l0000000000003F93
l0000000000003F93:
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  storeb_f_exit
storeb_f_exit:


// const_f
// Return size: 8
define const_f
const_f_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000003F95
l0000000000003F95:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x10<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	rax = Mem0[fs:0x28<32>:word64]
	Mem0[rbp - 8<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 9<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l0000000000004029
	// succ:  l0000000000003FD5 l0000000000004029
l0000000000003FD5:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l0000000000004029
	// succ:  l0000000000003FDD l0000000000004029
l0000000000003FDD:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l0000000000004029
	// succ:  l0000000000003FE5 l0000000000004029
l0000000000003FE5:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l0000000000004029
	// succ:  l0000000000003FED l0000000000004029
l0000000000003FED:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 2<8>)
	branch Test(EQ,Z) l0000000000004029
	// succ:  l0000000000003FF5 l0000000000004029
l0000000000003FF5:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 3<8>)
	branch Test(EQ,Z) l0000000000004029
	// succ:  l0000000000003FFD l0000000000004029
l0000000000003FFD:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = 0x00000000000064D0<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	goto l00000000000040D5
	// succ:  l00000000000040D5
l0000000000004029:
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000004075
	// succ:  l0000000000004036 l0000000000004075
l0000000000004036:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	rdx = rdx + rax
	SCZO = cond(rdx)
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	rsi = rdx
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call readWord (retsize: 8;)
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 4<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x0000000000009300<p64>:word32] = eax
	goto l00000000000040B2
	// succ:  l00000000000040B2
l0000000000004075:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	rdx = rdx + rax
	SCZO = cond(rdx)
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 3<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	rsi = rdx
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call readWord (retsize: 8;)
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 5<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x0000000000009300<p64>:word32] = eax
	// succ:  l00000000000040B2
l00000000000040B2:
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setCarry (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setZero (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setError (retsize: 8;)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000000040D5
l00000000000040D5:
	rcx = Mem0[rbp - 8<64>:word64]
	rcx = rcx ^ Mem0[fs:0x28<32>:word64]
	SZO = cond(rcx)
	C = false
	branch Test(EQ,Z) l00000000000040E9
	// succ:  l00000000000040E4 l00000000000040E9
l00000000000040E4:
	call fn0000000000002170 (retsize: 8;)
	// succ:  l00000000000040E9
l00000000000040E9:
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  const_f_exit
const_f_exit:


// push_f
// Return size: 8
define push_f
push_f_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l00000000000040EB
l00000000000040EB:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x10<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	rax = Mem0[fs:0x28<32>:word64]
	Mem0[rbp - 8<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 9<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l000000000000417C
	// succ:  l000000000000412B l000000000000417C
l000000000000412B:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l000000000000417C
	// succ:  l0000000000004133 l000000000000417C
l0000000000004133:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l000000000000417C
	// succ:  l000000000000413B l000000000000417C
l000000000000413B:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l000000000000417C
	// succ:  l0000000000004143 l000000000000417C
l0000000000004143:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 3<8>)
	branch Test(EQ,Z) l000000000000417C
	// succ:  l000000000000414B l000000000000417C
l000000000000414B:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 2<8>)
	branch Test(EQ,Z) l000000000000417C
	// succ:  l0000000000004153 l000000000000417C
l0000000000004153:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = 0x0000000000006508<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	goto l00000000000041EA
	// succ:  l00000000000041EA
l000000000000417C:
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setCarry (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setError (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setZero (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rdx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = Mem0[0x0000000000009308<p64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx + 2<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	esi = eax
	rsi = CONVERT(esi, word32, uint64)
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call writeWord (retsize: 8;)
	eax = Mem0[0x0000000000009308<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x0000000000009308<p64>:word32] = eax
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x0000000000009300<p64>:word32] = eax
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000000041EA
l00000000000041EA:
	rcx = Mem0[rbp - 8<64>:word64]
	rcx = rcx ^ Mem0[fs:0x28<32>:word64]
	SZO = cond(rcx)
	C = false
	branch Test(EQ,Z) l00000000000041FE
	// succ:  l00000000000041F9 l00000000000041FE
l00000000000041F9:
	call fn0000000000002170 (retsize: 8;)
	// succ:  l00000000000041FE
l00000000000041FE:
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  push_f_exit
push_f_exit:


// pop_f
// Return size: 8
define pop_f
pop_f_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000004200
l0000000000004200:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x10<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	rax = Mem0[fs:0x28<32>:word64]
	Mem0[rbp - 8<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 9<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l0000000000004294
	// succ:  l0000000000004240 l0000000000004294
l0000000000004240:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l0000000000004294
	// succ:  l0000000000004248 l0000000000004294
l0000000000004248:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l0000000000004294
	// succ:  l0000000000004250 l0000000000004294
l0000000000004250:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l0000000000004294
	// succ:  l0000000000004258 l0000000000004294
l0000000000004258:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 3<8>)
	branch Test(EQ,Z) l0000000000004294
	// succ:  l0000000000004260 l0000000000004294
l0000000000004260:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 2<8>)
	branch Test(EQ,Z) l0000000000004294
	// succ:  l0000000000004268 l0000000000004294
l0000000000004268:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = 0x0000000000006540<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000000431F
	// succ:  l000000000000431F
l0000000000004294:
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setCarry (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setZero (retsize: 8;)
	edx = Mem0[0x0000000000009308<p64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	eax = Mem0[0x000000000000930C<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(edx - eax)
	branch Test(ULT,C) l0000000000004301
	// succ:  l00000000000042B8 l0000000000004301
l00000000000042B8:
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setError (retsize: 8;)
	eax = Mem0[0x0000000000009308<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax - 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x0000000000009308<p64>:word32] = eax
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	rdx = rdx + rax
	SCZO = cond(rdx)
	eax = Mem0[0x0000000000009308<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	rsi = rdx
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call readWord (retsize: 8;)
	goto l000000000000430B
	// succ:  l000000000000430B
l0000000000004301:
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	call setError (retsize: 8;)
	// succ:  l000000000000430B
l000000000000430B:
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x0000000000009300<p64>:word32] = eax
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000000431F
l000000000000431F:
	rcx = Mem0[rbp - 8<64>:word64]
	rcx = rcx ^ Mem0[fs:0x28<32>:word64]
	SZO = cond(rcx)
	C = false
	branch Test(EQ,Z) l0000000000004333
	// succ:  l000000000000432E l0000000000004333
l000000000000432E:
	call fn0000000000002170 (retsize: 8;)
	// succ:  l0000000000004333
l0000000000004333:
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  pop_f_exit
pop_f_exit:


// cmp_f
// Return size: 8
define cmp_f
cmp_f_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000004335
l0000000000004335:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x10<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	rax = Mem0[fs:0x28<32>:word64]
	Mem0[rbp - 8<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 0xA<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 2<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 9<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l00000000000043B4
	// succ:  l000000000000438C l00000000000043B4
l000000000000438C:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l00000000000043B4
	// succ:  l0000000000004394 l00000000000043B4
l0000000000004394:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l00000000000043B4
	// succ:  l000000000000439C l00000000000043B4
l000000000000439C:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l00000000000043B4
	// succ:  l00000000000043A4 l00000000000043B4
l00000000000043A4:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 2<8>)
	branch Test(EQ,Z) l00000000000043B4
	// succ:  l00000000000043AC l00000000000043B4
l00000000000043AC:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 3<8>)
	branch Test(NE,Z) l00000000000043E4
	// succ:  l00000000000043B4 l00000000000043E4
l00000000000043B4:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l0000000000004417
	// succ:  l00000000000043BC l0000000000004417
l00000000000043BC:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l0000000000004417
	// succ:  l00000000000043C4 l0000000000004417
l00000000000043C4:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l0000000000004417
	// succ:  l00000000000043CC l0000000000004417
l00000000000043CC:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l0000000000004417
	// succ:  l00000000000043D4 l0000000000004417
l00000000000043D4:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 2<8>)
	branch Test(EQ,Z) l0000000000004417
	// succ:  l00000000000043DC l0000000000004417
l00000000000043DC:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 3<8>)
	branch Test(EQ,Z) l0000000000004417
	// succ:  l00000000000043E4 l0000000000004417
l00000000000043E4:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = CONVERT(al, byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = 0x0000000000006570<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	goto l00000000000044E6
	// succ:  l00000000000044E6
l0000000000004417:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	edx = Mem0[rdx + rax:word32]
	rdx = CONVERT(edx, word32, uint64)
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rcx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rcx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(edx - eax)
	al = CONVERT(Test(EQ,Z), bool, int8)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call setCarry (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	edx = Mem0[rdx + rax:word32]
	rdx = CONVERT(edx, word32, uint64)
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rcx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rcx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(edx - eax)
	branch Test(NE,Z) l00000000000044BC
	// succ:  l0000000000004496 l00000000000044BC
l0000000000004496:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rdx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00000000000044BC
	// succ:  l00000000000044B5 l00000000000044BC
l00000000000044B5:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l00000000000044C1
	// succ:  l00000000000044C1
l00000000000044BC:
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000000044C1
l00000000000044C1:
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call setZero (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setError (retsize: 8;)
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 3<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x0000000000009300<p64>:word32] = eax
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000000044E6
l00000000000044E6:
	rsi = Mem0[rbp - 8<64>:word64]
	rsi = rsi ^ Mem0[fs:0x28<32>:word64]
	SZO = cond(rsi)
	C = false
	branch Test(EQ,Z) l00000000000044FA
	// succ:  l00000000000044F5 l00000000000044FA
l00000000000044F5:
	call fn0000000000002170 (retsize: 8;)
	// succ:  l00000000000044FA
l00000000000044FA:
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  cmp_f_exit
cmp_f_exit:


// uless_f
// Return size: 8
define uless_f
uless_f_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l00000000000044FC
l00000000000044FC:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x10<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	rax = Mem0[fs:0x28<32>:word64]
	Mem0[rbp - 8<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 0xA<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 2<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 9<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l000000000000457B
	// succ:  l0000000000004553 l000000000000457B
l0000000000004553:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l000000000000457B
	// succ:  l000000000000455B l000000000000457B
l000000000000455B:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l000000000000457B
	// succ:  l0000000000004563 l000000000000457B
l0000000000004563:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l000000000000457B
	// succ:  l000000000000456B l000000000000457B
l000000000000456B:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 2<8>)
	branch Test(EQ,Z) l000000000000457B
	// succ:  l0000000000004573 l000000000000457B
l0000000000004573:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 3<8>)
	branch Test(NE,Z) l00000000000045AB
	// succ:  l000000000000457B l00000000000045AB
l000000000000457B:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l00000000000045DB
	// succ:  l0000000000004583 l00000000000045DB
l0000000000004583:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l00000000000045DB
	// succ:  l000000000000458B l00000000000045DB
l000000000000458B:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l00000000000045DB
	// succ:  l0000000000004593 l00000000000045DB
l0000000000004593:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l00000000000045DB
	// succ:  l000000000000459B l00000000000045DB
l000000000000459B:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 2<8>)
	branch Test(EQ,Z) l00000000000045DB
	// succ:  l00000000000045A3 l00000000000045DB
l00000000000045A3:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 3<8>)
	branch Test(EQ,Z) l00000000000045DB
	// succ:  l00000000000045AB l00000000000045DB
l00000000000045AB:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = CONVERT(al, byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = 0x00000000000065A8<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000004648
	// succ:  l0000000000004648
l00000000000045DB:
	eax = CONVERT(Mem0[rbp - 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	edx = Mem0[rdx + rax:word32]
	rdx = CONVERT(edx, word32, uint64)
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rcx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rcx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(edx - eax)
	al = CONVERT(Test(ULT,C), bool, int8)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call setCarry (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setZero (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setError (retsize: 8;)
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 3<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x0000000000009300<p64>:word32] = eax
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000004648
l0000000000004648:
	rsi = Mem0[rbp - 8<64>:word64]
	rsi = rsi ^ Mem0[fs:0x28<32>:word64]
	SZO = cond(rsi)
	C = false
	branch Test(EQ,Z) l000000000000465C
	// succ:  l0000000000004657 l000000000000465C
l0000000000004657:
	call fn0000000000002170 (retsize: 8;)
	// succ:  l000000000000465C
l000000000000465C:
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  uless_f_exit
uless_f_exit:


// sless_f
// Return size: 8
define sless_f
sless_f_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l000000000000465E
l000000000000465E:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x18<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	rax = Mem0[fs:0x28<32>:word64]
	Mem0[rbp - 0x18<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 0x1A<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 2<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 0x19<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 0x1A<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l00000000000046DE
	// succ:  l00000000000046B6 l00000000000046DE
l00000000000046B6:
	eax = CONVERT(Mem0[rbp - 0x1A<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l00000000000046DE
	// succ:  l00000000000046BE l00000000000046DE
l00000000000046BE:
	eax = CONVERT(Mem0[rbp - 0x1A<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l00000000000046DE
	// succ:  l00000000000046C6 l00000000000046DE
l00000000000046C6:
	eax = CONVERT(Mem0[rbp - 0x1A<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l00000000000046DE
	// succ:  l00000000000046CE l00000000000046DE
l00000000000046CE:
	eax = CONVERT(Mem0[rbp - 0x1A<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 2<8>)
	branch Test(EQ,Z) l00000000000046DE
	// succ:  l00000000000046D6 l00000000000046DE
l00000000000046D6:
	eax = CONVERT(Mem0[rbp - 0x1A<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 3<8>)
	branch Test(NE,Z) l000000000000470E
	// succ:  l00000000000046DE l000000000000470E
l00000000000046DE:
	eax = CONVERT(Mem0[rbp - 0x19<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l000000000000473E
	// succ:  l00000000000046E6 l000000000000473E
l00000000000046E6:
	eax = CONVERT(Mem0[rbp - 0x19<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l000000000000473E
	// succ:  l00000000000046EE l000000000000473E
l00000000000046EE:
	eax = CONVERT(Mem0[rbp - 0x19<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l000000000000473E
	// succ:  l00000000000046F6 l000000000000473E
l00000000000046F6:
	eax = CONVERT(Mem0[rbp - 0x19<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l000000000000473E
	// succ:  l00000000000046FE l000000000000473E
l00000000000046FE:
	eax = CONVERT(Mem0[rbp - 0x19<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 2<8>)
	branch Test(EQ,Z) l000000000000473E
	// succ:  l0000000000004706 l000000000000473E
l0000000000004706:
	eax = CONVERT(Mem0[rbp - 0x19<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 3<8>)
	branch Test(EQ,Z) l000000000000473E
	// succ:  l000000000000470E l000000000000473E
l000000000000470E:
	eax = CONVERT(Mem0[rbp - 0x19<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = CONVERT(al, byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	eax = CONVERT(Mem0[rbp - 0x1A<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = 0x00000000000065E8<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	goto l00000000000047BD
	// succ:  l00000000000047BD
l000000000000473E:
	eax = CONVERT(Mem0[rbp - 0x1A<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rdx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call registerToLongInt (retsize: 8;)
	rbx = rax
	eax = CONVERT(Mem0[rbp - 0x19<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rdx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call registerToLongInt (retsize: 8;)
	SCZO = cond(rbx - rax)
	al = CONVERT(Test(LT,SO), bool, int8)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call setCarry (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setZero (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setError (retsize: 8;)
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 3<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x0000000000009300<p64>:word32] = eax
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000000047BD
l00000000000047BD:
	rbx = Mem0[rbp - 0x18<64>:word64]
	rbx = rbx ^ Mem0[fs:0x28<32>:word64]
	SZO = cond(rbx)
	C = false
	branch Test(EQ,Z) l00000000000047D1
	// succ:  l00000000000047CC l00000000000047D1
l00000000000047CC:
	call fn0000000000002170 (retsize: 8;)
	// succ:  l00000000000047D1
l00000000000047D1:
	rsp = rsp + 0x18<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  sless_f_exit
sless_f_exit:


// jmp_f
// Return size: 8
define jmp_f
jmp_f_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l00000000000047D8
l00000000000047D8:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x10<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	rax = Mem0[fs:0x28<32>:word64]
	Mem0[rbp - 8<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 9<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l0000000000004859
	// succ:  l0000000000004818 l0000000000004859
l0000000000004818:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l0000000000004859
	// succ:  l0000000000004820 l0000000000004859
l0000000000004820:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l0000000000004859
	// succ:  l0000000000004828 l0000000000004859
l0000000000004828:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l0000000000004859
	// succ:  l0000000000004830 l0000000000004859
l0000000000004830:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = 0x0000000000006628<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000000487F
	// succ:  l000000000000487F
l0000000000004859:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rdx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[0x0000000000009300<p64>:word32] = eax
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000000487F
l000000000000487F:
	rcx = Mem0[rbp - 8<64>:word64]
	rcx = rcx ^ Mem0[fs:0x28<32>:word64]
	SZO = cond(rcx)
	C = false
	branch Test(EQ,Z) l0000000000004893
	// succ:  l000000000000488E l0000000000004893
l000000000000488E:
	call fn0000000000002170 (retsize: 8;)
	// succ:  l0000000000004893
l0000000000004893:
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  jmp_f_exit
jmp_f_exit:


// jmpz_f
// Return size: 8
define jmpz_f
jmpz_f_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000004895
l0000000000004895:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x10<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	rax = Mem0[fs:0x28<32>:word64]
	Mem0[rbp - 8<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 9<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l0000000000004916
	// succ:  l00000000000048D5 l0000000000004916
l00000000000048D5:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l0000000000004916
	// succ:  l00000000000048DD l0000000000004916
l00000000000048DD:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l0000000000004916
	// succ:  l00000000000048E5 l0000000000004916
l00000000000048E5:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l0000000000004916
	// succ:  l00000000000048ED l0000000000004916
l00000000000048ED:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = 0x0000000000006658<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000004950
	// succ:  l0000000000004950
l0000000000004916:
	call getZero (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000000493C
	// succ:  l000000000000491F l000000000000493C
l000000000000491F:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rdx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000004945
	// succ:  l0000000000004945
l000000000000493C:
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	// succ:  l0000000000004945
l0000000000004945:
	Mem0[0x0000000000009300<p64>:word32] = eax
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000004950
l0000000000004950:
	rcx = Mem0[rbp - 8<64>:word64]
	rcx = rcx ^ Mem0[fs:0x28<32>:word64]
	SZO = cond(rcx)
	C = false
	branch Test(EQ,Z) l0000000000004964
	// succ:  l000000000000495F l0000000000004964
l000000000000495F:
	call fn0000000000002170 (retsize: 8;)
	// succ:  l0000000000004964
l0000000000004964:
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  jmpz_f_exit
jmpz_f_exit:


// jmpc_f
// Return size: 8
define jmpc_f
jmpc_f_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000004966
l0000000000004966:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x10<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	rax = Mem0[fs:0x28<32>:word64]
	Mem0[rbp - 8<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 9<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l00000000000049E7
	// succ:  l00000000000049A6 l00000000000049E7
l00000000000049A6:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l00000000000049E7
	// succ:  l00000000000049AE l00000000000049E7
l00000000000049AE:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l00000000000049E7
	// succ:  l00000000000049B6 l00000000000049E7
l00000000000049B6:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l00000000000049E7
	// succ:  l00000000000049BE l00000000000049E7
l00000000000049BE:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = 0x0000000000006690<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000004A21
	// succ:  l0000000000004A21
l00000000000049E7:
	call getCarry (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000004A0D
	// succ:  l00000000000049F0 l0000000000004A0D
l00000000000049F0:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rdx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000004A16
	// succ:  l0000000000004A16
l0000000000004A0D:
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	// succ:  l0000000000004A16
l0000000000004A16:
	Mem0[0x0000000000009300<p64>:word32] = eax
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000004A21
l0000000000004A21:
	rcx = Mem0[rbp - 8<64>:word64]
	rcx = rcx ^ Mem0[fs:0x28<32>:word64]
	SZO = cond(rcx)
	C = false
	branch Test(EQ,Z) l0000000000004A35
	// succ:  l0000000000004A30 l0000000000004A35
l0000000000004A30:
	call fn0000000000002170 (retsize: 8;)
	// succ:  l0000000000004A35
l0000000000004A35:
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  jmpc_f_exit
jmpc_f_exit:


// jmpe_f
// Return size: 8
define jmpe_f
jmpe_f_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000004A37
l0000000000004A37:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x10<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	rax = Mem0[fs:0x28<32>:word64]
	Mem0[rbp - 8<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 9<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l0000000000004AB8
	// succ:  l0000000000004A77 l0000000000004AB8
l0000000000004A77:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l0000000000004AB8
	// succ:  l0000000000004A7F l0000000000004AB8
l0000000000004A7F:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l0000000000004AB8
	// succ:  l0000000000004A87 l0000000000004AB8
l0000000000004A87:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l0000000000004AB8
	// succ:  l0000000000004A8F l0000000000004AB8
l0000000000004A8F:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = 0x00000000000066C8<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000004AF2
	// succ:  l0000000000004AF2
l0000000000004AB8:
	call getError (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000004ADE
	// succ:  l0000000000004AC1 l0000000000004ADE
l0000000000004AC1:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rdx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000004AE7
	// succ:  l0000000000004AE7
l0000000000004ADE:
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	// succ:  l0000000000004AE7
l0000000000004AE7:
	Mem0[0x0000000000009300<p64>:word32] = eax
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000004AF2
l0000000000004AF2:
	rcx = Mem0[rbp - 8<64>:word64]
	rcx = rcx ^ Mem0[fs:0x28<32>:word64]
	SZO = cond(rcx)
	C = false
	branch Test(EQ,Z) l0000000000004B06
	// succ:  l0000000000004B01 l0000000000004B06
l0000000000004B01:
	call fn0000000000002170 (retsize: 8;)
	// succ:  l0000000000004B06
l0000000000004B06:
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  jmpe_f_exit
jmpe_f_exit:


// call_f
// Return size: 8
define call_f
call_f_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000004B08
l0000000000004B08:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x10<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	rax = Mem0[fs:0x28<32>:word64]
	Mem0[rbp - 8<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 9<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l0000000000004B89
	// succ:  l0000000000004B48 l0000000000004B89
l0000000000004B48:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l0000000000004B89
	// succ:  l0000000000004B50 l0000000000004B89
l0000000000004B50:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l0000000000004B89
	// succ:  l0000000000004B58 l0000000000004B89
l0000000000004B58:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l0000000000004B89
	// succ:  l0000000000004B60 l0000000000004B89
l0000000000004B60:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = 0x0000000000006700<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000004BF7
	// succ:  l0000000000004BF7
l0000000000004B89:
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setCarry (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setError (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setZero (retsize: 8;)
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 2<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	eax = Mem0[0x0000000000009308<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	esi = edx
	rsi = CONVERT(esi, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call writeWord (retsize: 8;)
	eax = Mem0[0x0000000000009308<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x0000000000009308<p64>:word32] = eax
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rdx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[0x0000000000009300<p64>:word32] = eax
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000004BF7
l0000000000004BF7:
	rcx = Mem0[rbp - 8<64>:word64]
	rcx = rcx ^ Mem0[fs:0x28<32>:word64]
	SZO = cond(rcx)
	C = false
	branch Test(EQ,Z) l0000000000004C0B
	// succ:  l0000000000004C06 l0000000000004C0B
l0000000000004C06:
	call fn0000000000002170 (retsize: 8;)
	// succ:  l0000000000004C0B
l0000000000004C0B:
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  call_f_exit
call_f_exit:


// ret_f
// Return size: 8
define ret_f
ret_f_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000004C0D
l0000000000004C0D:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	call mcount (retsize: 8;)
	eax = Mem0[0x0000000000009308<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax - 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x0000000000009308<p64>:word32] = eax
	eax = Mem0[0x0000000000009308<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	rsi = 0x0000000000009300<p64>
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call readWord (retsize: 8;)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  ret_f_exit
ret_f_exit:


// callprintfd_f
// Return size: 8
define callprintfd_f
callprintfd_f_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000004C48
l0000000000004C48:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x10<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	rax = Mem0[fs:0x28<32>:word64]
	Mem0[rbp - 8<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 0xD<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 0xD<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l0000000000004CC9
	// succ:  l0000000000004C88 l0000000000004CC9
l0000000000004C88:
	eax = CONVERT(Mem0[rbp - 0xD<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l0000000000004CC9
	// succ:  l0000000000004C90 l0000000000004CC9
l0000000000004C90:
	eax = CONVERT(Mem0[rbp - 0xD<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l0000000000004CC9
	// succ:  l0000000000004C98 l0000000000004CC9
l0000000000004C98:
	eax = CONVERT(Mem0[rbp - 0xD<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l0000000000004CC9
	// succ:  l0000000000004CA0 l0000000000004CC9
l0000000000004CA0:
	eax = CONVERT(Mem0[rbp - 0xD<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = 0x0000000000006738<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000004D41
	// succ:  l0000000000004D41
l0000000000004CC9:
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setCarry (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setZero (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setError (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 0xD<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rdx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = rbp - 0xC<64>
	rsi = rdx
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call readWord (retsize: 8;)
	eax = Mem0[rbp - 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call registerToLongInt (retsize: 8;)
	esi = eax
	rsi = CONVERT(esi, word32, uint64)
	rdi = 0x0000000000006770<p64>
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn0000000000002180 (retsize: 8;)
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x0000000000009300<p64>:word32] = eax
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000004D41
l0000000000004D41:
	rcx = Mem0[rbp - 8<64>:word64]
	rcx = rcx ^ Mem0[fs:0x28<32>:word64]
	SZO = cond(rcx)
	C = false
	branch Test(EQ,Z) l0000000000004D55
	// succ:  l0000000000004D50 l0000000000004D55
l0000000000004D50:
	call fn0000000000002170 (retsize: 8;)
	// succ:  l0000000000004D55
l0000000000004D55:
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  callprintfd_f_exit
callprintfd_f_exit:


// callprintfu_f
// Return size: 8
define callprintfu_f
callprintfu_f_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000004D57
l0000000000004D57:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x10<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	rax = Mem0[fs:0x28<32>:word64]
	Mem0[rbp - 8<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 0xD<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 0xD<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l0000000000004DD8
	// succ:  l0000000000004D97 l0000000000004DD8
l0000000000004D97:
	eax = CONVERT(Mem0[rbp - 0xD<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l0000000000004DD8
	// succ:  l0000000000004D9F l0000000000004DD8
l0000000000004D9F:
	eax = CONVERT(Mem0[rbp - 0xD<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l0000000000004DD8
	// succ:  l0000000000004DA7 l0000000000004DD8
l0000000000004DA7:
	eax = CONVERT(Mem0[rbp - 0xD<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l0000000000004DD8
	// succ:  l0000000000004DAF l0000000000004DD8
l0000000000004DAF:
	eax = CONVERT(Mem0[rbp - 0xD<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = 0x0000000000006778<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000004E49
	// succ:  l0000000000004E49
l0000000000004DD8:
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setCarry (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setZero (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setError (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 0xD<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rdx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = rbp - 0xC<64>
	rsi = rdx
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call readWord (retsize: 8;)
	eax = Mem0[rbp - 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	esi = eax
	rsi = CONVERT(esi, word32, uint64)
	rdi = 0x00000000000067B0<p64>
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn0000000000002180 (retsize: 8;)
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x0000000000009300<p64>:word32] = eax
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000004E49
l0000000000004E49:
	rcx = Mem0[rbp - 8<64>:word64]
	rcx = rcx ^ Mem0[fs:0x28<32>:word64]
	SZO = cond(rcx)
	C = false
	branch Test(EQ,Z) l0000000000004E5D
	// succ:  l0000000000004E58 l0000000000004E5D
l0000000000004E58:
	call fn0000000000002170 (retsize: 8;)
	// succ:  l0000000000004E5D
l0000000000004E5D:
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  callprintfu_f_exit
callprintfu_f_exit:


// callprintfs_f
// Return size: 8
define callprintfs_f
callprintfs_f_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000004E5F
l0000000000004E5F:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x10<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	rax = Mem0[fs:0x28<32>:word64]
	Mem0[rbp - 8<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 9<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l0000000000004EE0
	// succ:  l0000000000004E9F l0000000000004EE0
l0000000000004E9F:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l0000000000004EE0
	// succ:  l0000000000004EA7 l0000000000004EE0
l0000000000004EA7:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l0000000000004EE0
	// succ:  l0000000000004EAF l0000000000004EE0
l0000000000004EAF:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l0000000000004EE0
	// succ:  l0000000000004EB7 l0000000000004EE0
l0000000000004EB7:
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = 0x00000000000067B8<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000004F48
	// succ:  l0000000000004F48
l0000000000004EE0:
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setCarry (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setZero (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setError (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rdx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call address (retsize: 8;)
	rsi = rax
	rdi = 0x00000000000067F0<p64>
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn0000000000002180 (retsize: 8;)
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x0000000000009300<p64>:word32] = eax
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000004F48
l0000000000004F48:
	rcx = Mem0[rbp - 8<64>:word64]
	rcx = rcx ^ Mem0[fs:0x28<32>:word64]
	SZO = cond(rcx)
	C = false
	branch Test(EQ,Z) l0000000000004F5C
	// succ:  l0000000000004F57 l0000000000004F5C
l0000000000004F57:
	call fn0000000000002170 (retsize: 8;)
	// succ:  l0000000000004F5C
l0000000000004F5C:
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  callprintfs_f_exit
callprintfs_f_exit:


// callscanfd_f
// Return size: 8
define callscanfd_f
callscanfd_f_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000004F5E
l0000000000004F5E:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x10<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	rax = Mem0[fs:0x28<32>:word64]
	Mem0[rbp - 8<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 0xD<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 0xD<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l0000000000004FE2
	// succ:  l0000000000004F9E l0000000000004FE2
l0000000000004F9E:
	eax = CONVERT(Mem0[rbp - 0xD<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l0000000000004FE2
	// succ:  l0000000000004FA6 l0000000000004FE2
l0000000000004FA6:
	eax = CONVERT(Mem0[rbp - 0xD<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l0000000000004FE2
	// succ:  l0000000000004FAE l0000000000004FE2
l0000000000004FAE:
	eax = CONVERT(Mem0[rbp - 0xD<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l0000000000004FE2
	// succ:  l0000000000004FB6 l0000000000004FE2
l0000000000004FB6:
	eax = CONVERT(Mem0[rbp - 0xD<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = 0x00000000000067F8<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000005084
	// succ:  l0000000000005084
l0000000000004FE2:
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setCarry (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setZero (retsize: 8;)
	rax = rbp - 0xC<64>
	rsi = rax
	rdi = 0x0000000000006770<p64>
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn0000000000002220 (retsize: 8;)
	SCZO = cond(eax - 1<32>)
	branch Test(NE,Z) l0000000000005066
	// succ:  l0000000000005013 l0000000000005066
l0000000000005013:
	eax = Mem0[rbp - 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0xFFFF8000<32>)
	branch Test(LT,SO) l0000000000005066
	// succ:  l000000000000501D l0000000000005066
l000000000000501D:
	eax = Mem0[rbp - 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0x7FFF<32>)
	branch Test(GT,SZO) l0000000000005066
	// succ:  l0000000000005027 l0000000000005066
l0000000000005027:
	eax = Mem0[rbp - 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdi = rax
	call longIntToRegister (retsize: 8;)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	eax = CONVERT(Mem0[rbp - 0xD<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rcx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rcx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	esi = edx
	rsi = CONVERT(esi, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call writeWord (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setError (retsize: 8;)
	goto l0000000000005070
	// succ:  l0000000000005070
l0000000000005066:
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	call setError (retsize: 8;)
	// succ:  l0000000000005070
l0000000000005070:
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x0000000000009300<p64>:word32] = eax
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000005084
l0000000000005084:
	rcx = Mem0[rbp - 8<64>:word64]
	rcx = rcx ^ Mem0[fs:0x28<32>:word64]
	SZO = cond(rcx)
	C = false
	branch Test(EQ,Z) l0000000000005098
	// succ:  l0000000000005093 l0000000000005098
l0000000000005093:
	call fn0000000000002170 (retsize: 8;)
	// succ:  l0000000000005098
l0000000000005098:
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  callscanfd_f_exit
callscanfd_f_exit:


// callscanfu_f
// Return size: 8
define callscanfu_f
callscanfu_f_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l000000000000509A
l000000000000509A:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x10<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	rax = Mem0[fs:0x28<32>:word64]
	Mem0[rbp - 8<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 0xD<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 0xD<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l000000000000511E
	// succ:  l00000000000050DA l000000000000511E
l00000000000050DA:
	eax = CONVERT(Mem0[rbp - 0xD<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l000000000000511E
	// succ:  l00000000000050E2 l000000000000511E
l00000000000050E2:
	eax = CONVERT(Mem0[rbp - 0xD<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l000000000000511E
	// succ:  l00000000000050EA l000000000000511E
l00000000000050EA:
	eax = CONVERT(Mem0[rbp - 0xD<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l000000000000511E
	// succ:  l00000000000050F2 l000000000000511E
l00000000000050F2:
	eax = CONVERT(Mem0[rbp - 0xD<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = 0x0000000000006830<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	goto l00000000000051AA
	// succ:  l00000000000051AA
l000000000000511E:
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setCarry (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setZero (retsize: 8;)
	rax = rbp - 0xC<64>
	rsi = rax
	rdi = 0x00000000000067B0<p64>
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn0000000000002220 (retsize: 8;)
	SCZO = cond(eax - 1<32>)
	branch Test(NE,Z) l000000000000518C
	// succ:  l000000000000514F l000000000000518C
l000000000000514F:
	eax = Mem0[rbp - 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0xFFFF<32>)
	branch Test(UGT,CZ) l000000000000518C
	// succ:  l0000000000005159 l000000000000518C
l0000000000005159:
	edx = Mem0[rbp - 0xC<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	eax = CONVERT(Mem0[rbp - 0xD<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rcx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rcx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	esi = edx
	rsi = CONVERT(esi, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call writeWord (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setError (retsize: 8;)
	goto l0000000000005196
	// succ:  l0000000000005196
l000000000000518C:
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	call setError (retsize: 8;)
	// succ:  l0000000000005196
l0000000000005196:
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x0000000000009300<p64>:word32] = eax
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000000051AA
l00000000000051AA:
	rcx = Mem0[rbp - 8<64>:word64]
	rcx = rcx ^ Mem0[fs:0x28<32>:word64]
	SZO = cond(rcx)
	C = false
	branch Test(EQ,Z) l00000000000051BE
	// succ:  l00000000000051B9 l00000000000051BE
l00000000000051B9:
	call fn0000000000002170 (retsize: 8;)
	// succ:  l00000000000051BE
l00000000000051BE:
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  callscanfu_f_exit
callscanfu_f_exit:


// callscanfs_f
// Return size: 8
define callscanfs_f
callscanfs_f_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l00000000000051C0
l00000000000051C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	rax = Mem0[fs:0x28<32>:word64]
	Mem0[rbp - 8<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 0x12<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 2<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 0x11<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 0x12<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l000000000000523F
	// succ:  l0000000000005217 l000000000000523F
l0000000000005217:
	eax = CONVERT(Mem0[rbp - 0x12<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l000000000000523F
	// succ:  l000000000000521F l000000000000523F
l000000000000521F:
	eax = CONVERT(Mem0[rbp - 0x12<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l000000000000523F
	// succ:  l0000000000005227 l000000000000523F
l0000000000005227:
	eax = CONVERT(Mem0[rbp - 0x12<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l000000000000523F
	// succ:  l000000000000522F l000000000000523F
l000000000000522F:
	eax = CONVERT(Mem0[rbp - 0x12<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 2<8>)
	branch Test(EQ,Z) l000000000000523F
	// succ:  l0000000000005237 l000000000000523F
l0000000000005237:
	eax = CONVERT(Mem0[rbp - 0x12<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 3<8>)
	branch Test(NE,Z) l000000000000526F
	// succ:  l000000000000523F l000000000000526F
l000000000000523F:
	eax = CONVERT(Mem0[rbp - 0x11<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 4<8>)
	branch Test(EQ,Z) l00000000000052A2
	// succ:  l0000000000005247 l00000000000052A2
l0000000000005247:
	eax = CONVERT(Mem0[rbp - 0x11<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(EQ,Z) l00000000000052A2
	// succ:  l000000000000524F l00000000000052A2
l000000000000524F:
	eax = CONVERT(Mem0[rbp - 0x11<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 6<8>)
	branch Test(EQ,Z) l00000000000052A2
	// succ:  l0000000000005257 l00000000000052A2
l0000000000005257:
	eax = CONVERT(Mem0[rbp - 0x11<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 7<8>)
	branch Test(EQ,Z) l00000000000052A2
	// succ:  l000000000000525F l00000000000052A2
l000000000000525F:
	eax = CONVERT(Mem0[rbp - 0x11<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 2<8>)
	branch Test(EQ,Z) l00000000000052A2
	// succ:  l0000000000005267 l00000000000052A2
l0000000000005267:
	eax = CONVERT(Mem0[rbp - 0x11<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 3<8>)
	branch Test(EQ,Z) l00000000000052A2
	// succ:  l000000000000526F l00000000000052A2
l000000000000526F:
	eax = CONVERT(Mem0[rbp - 0x11<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = CONVERT(al, byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	eax = CONVERT(Mem0[rbp - 0x12<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = 0x0000000000006868<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000005378
	// succ:  l0000000000005378
l00000000000052A2:
	Mem0[rbp - 0x10<64>:word32] = 0<32>
	goto l00000000000052DF
	// succ:  l00000000000052DF
l00000000000052AB:
	eax = Mem0[rbp - 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(Mem0[rbp - 0x12<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	edx = CONVERT(dl, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rdx = CONVERT(edx, word32, int64)
	rcx = CONVERT(0<32> + rdx * 4<64>, word32, word64)
	rdx = 0x0000000000009300<p64>
	ecx = Mem0[rcx + rdx:word32]
	rcx = CONVERT(ecx, word32, uint64)
	edx = Mem0[rbp - 0x10<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx + ecx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	esi = eax
	rsi = CONVERT(esi, word32, uint64)
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call writeByte (retsize: 8;)
	v21 = Mem0[rbp - 0x10<64>:word32] + 1<32>
	Mem0[rbp - 0x10<64>:word32] = v21
	SCZO = cond(v21)
	// succ:  l00000000000052DF
l00000000000052DF:
	eax = CONVERT(Mem0[rbp - 0x11<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rdx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(Mem0[rbp - 0x10<64>:word32] - eax)
	branch Test(UGE,C) l0000000000005313
	// succ:  l00000000000052FF l0000000000005313
l00000000000052FF:
	call fn00000000000021B0 (retsize: 8;)
	Mem0[rbp - 0xC<64>:word32] = eax
	SCZO = cond(Mem0[rbp - 0xC<64>:word32] - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l0000000000005313
	// succ:  l000000000000530D l0000000000005313
l000000000000530D:
	SCZO = cond(Mem0[rbp - 0xC<64>:word32] - 0xA<32>)
	branch Test(NE,Z) l00000000000052AB
	// succ:  l0000000000005313 l00000000000052AB
l0000000000005313:
	eax = CONVERT(Mem0[rbp - 0x12<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	edx = Mem0[rdx + rax:word32]
	rdx = CONVERT(edx, word32, uint64)
	eax = Mem0[rbp - 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + edx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	esi = 0<32>
	rsi = CONVERT(esi, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call writeByte (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setCarry (retsize: 8;)
	SCZO = cond(Mem0[rbp - 0x10<64>:word32] - 0<32>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call setZero (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setError (retsize: 8;)
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 3<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x0000000000009300<p64>:word32] = eax
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000005378
l0000000000005378:
	rsi = Mem0[rbp - 8<64>:word64]
	rsi = rsi ^ Mem0[fs:0x28<32>:word64]
	SZO = cond(rsi)
	C = false
	branch Test(EQ,Z) l000000000000538C
	// succ:  l0000000000005387 l000000000000538C
l0000000000005387:
	call fn0000000000002170 (retsize: 8;)
	// succ:  l000000000000538C
l000000000000538C:
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  callscanfs_f_exit
callscanfs_f_exit:


// nop_f
// Return size: 8
define nop_f
nop_f_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l000000000000538E
l000000000000538E:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	call mcount (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setCarry (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setZero (retsize: 8;)
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	call setError (retsize: 8;)
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x0000000000009300<p64>:word32] = eax
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  nop_f_exit
nop_f_exit:


// end_f
// Return size: 8
define end_f
end_f_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l00000000000053D0
l00000000000053D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	call mcount (retsize: 8;)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  end_f_exit
end_f_exit:


// printSIPRO
// Return size: 8
define printSIPRO
printSIPRO_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l00000000000053E5
l00000000000053E5:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	rax = Mem0[fs:0x28<32>:word64]
	Mem0[rbp - 0x18<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbp - 0x20<64>:word32] = 0<32>
	goto l0000000000005496
	// succ:  l0000000000005496
l0000000000005413:
	eax = Mem0[rbp - 0x20<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	ebx = Mem0[rdx + rax:word32]
	rbx = CONVERT(ebx, word32, uint64)
	eax = Mem0[rbp - 0x20<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	eax = Mem0[rdx + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call registerToLongInt (retsize: 8;)
	esi = eax
	rsi = CONVERT(esi, word32, uint64)
	eax = Mem0[rbp - 0x20<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = CONVERT(0<32> + rax * 4<64>, word32, word64)
	rax = 0x0000000000009300<p64>
	ecx = Mem0[rdx + rax:word32]
	rcx = CONVERT(ecx, word32, uint64)
	eax = Mem0[rbp - 0x20<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = CONVERT(0<32> + rax * 8<64>, word32, word64)
	rax = 0x0000000000008C80<p64>
	rdx = Mem0[rdx + rax:word64]
	rax = Mem0[0x00000000000092E0<p64>:word64]
	r9d = ebx
	r9 = CONVERT(r9d, word32, uint64)
	r8d = esi
	r8 = CONVERT(r8d, word32, uint64)
	rsi = 0x00000000000068A7<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	v25 = Mem0[rbp - 0x20<64>:word32] + 1<32>
	Mem0[rbp - 0x20<64>:word32] = v25
	SCZO = cond(v25)
	// succ:  l0000000000005496
l0000000000005496:
	eax = Mem0[rbp - 0x20<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = CONVERT(0<32> + rax * 8<64>, word32, word64)
	rax = 0x0000000000008C80<p64>
	rax = Mem0[rdx + rax:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l0000000000005413
	// succ:  l00000000000054B5 l0000000000005413
l00000000000054B5:
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = rax
	edi = 0xA<32>
	rdi = CONVERT(edi, word32, uint64)
	call fn00000000000021A0 (retsize: 8;)
	eax = CONVERT(Mem0[0x0000000000009321<p64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000005569
	// succ:  l00000000000054D8 l0000000000005569
l00000000000054D8:
	Mem0[rbp - 0x1C<64>:word32] = 0xA<32>
	goto l000000000000554F
	// succ:  l000000000000554F
l00000000000054E1:
	eax = Mem0[0x000000000000930C<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call registerToLongInt (retsize: 8;)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	eax = Mem0[rbp - 0x1C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax + edx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l000000000000554B
	// succ:  l00000000000054FB l000000000000554B
l00000000000054FB:
	eax = Mem0[0x000000000000930C<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = Mem0[rbp - 0x1C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx + edx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	edx = edx + eax
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	rax = rbp - 0x24<64>
	rsi = rax
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call readWord (retsize: 8;)
	esi = Mem0[rbp - 0x24<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	eax = Mem0[0x000000000000930C<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = Mem0[rbp - 0x1C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx + edx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	ecx = SLICE(rax + rdx, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	eax = Mem0[rbp - 0x1C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + rax, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[0x00000000000092E0<p64>:word64]
	r8d = esi
	r8 = CONVERT(r8d, word32, uint64)
	rsi = 0x00000000000068C3<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	// succ:  l000000000000554B
l000000000000554B:
	v29 = Mem0[rbp - 0x1C<64>:word32] - 1<32>
	Mem0[rbp - 0x1C<64>:word32] = v29
	SCZO = cond(v29)
	// succ:  l000000000000554F
l000000000000554F:
	SCZO = cond(Mem0[rbp - 0x1C<64>:word32] - 0xFFFFFFF6<32>)
	branch Test(GE,SO) l00000000000054E1
	// succ:  l0000000000005555 l00000000000054E1
l0000000000005555:
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = rax
	edi = 0xA<32>
	rdi = CONVERT(edi, word32, uint64)
	call fn00000000000021A0 (retsize: 8;)
	// succ:  l0000000000005569
l0000000000005569:
	rax = Mem0[rbp - 0x18<64>:word64]
	rax = rax ^ Mem0[fs:0x28<32>:word64]
	SZO = cond(rax)
	C = false
	branch Test(EQ,Z) l000000000000557E
	// succ:  l0000000000005579 l000000000000557E
l0000000000005579:
	call fn0000000000002170 (retsize: 8;)
	// succ:  l000000000000557E
l000000000000557E:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  printSIPRO_exit
printSIPRO_exit:


// execute
// Return size: 8
define execute
execute_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000005585
l0000000000005585:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x10<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	rax = Mem0[fs:0x28<32>:word64]
	Mem0[rbp - 8<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l00000000000055A6
l00000000000055A6:
	eax = Mem0[0x0000000000009300<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = rbp - 0xD<64>
	rsi = rdx
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call readByte (retsize: 8;)
	Mem0[rbp - 0xC<64>:word32] = 0<32>
	goto l00000000000055C7
	// succ:  l00000000000055C7
l00000000000055C3:
	v24 = Mem0[rbp - 0xC<64>:word32] + 1<32>
	Mem0[rbp - 0xC<64>:word32] = v24
	SCZO = cond(v24)
	// succ:  l00000000000055C7
l00000000000055C7:
	eax = Mem0[rbp - 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = rax + rax
	rax = 0x0000000000009020<p64>
	eax = CONVERT(Mem0[rdx + rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l00000000000055FF
	// succ:  l00000000000055DF l00000000000055FF
l00000000000055DF:
	eax = Mem0[rbp - 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = rax + rax
	rax = 0x0000000000009020<p64>
	eax = CONVERT(Mem0[rdx + rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(ax, word16, int32)
	eax = CONVERT(Mem0[rbp - 0xD<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(edx - eax)
	branch Test(NE,Z) l00000000000055C3
	// succ:  l00000000000055FF l00000000000055C3
l00000000000055FF:
	eax = Mem0[rbp - 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = rax + rax
	rax = 0x0000000000009020<p64>
	eax = CONVERT(Mem0[rdx + rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(NE,Z) l0000000000005643
	// succ:  l0000000000005617 l0000000000005643
l0000000000005617:
	eax = CONVERT(Mem0[rbp - 0xD<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = 0x00000000000068D3<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000005712
	// succ:  l0000000000005712
l0000000000005643:
	eax = CONVERT(Mem0[0x0000000000009320<p64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00000000000056A2
	// succ:  l000000000000564E l00000000000056A2
l000000000000564E:
	eax = Mem0[rbp - 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = CONVERT(0<32> + rax * 8<64>, word32, word64)
	rax = 0x00000000000091A0<p64>
	rdi = Mem0[rdx + rax:word64]
	eax = CONVERT(Mem0[rbp - 0xD<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	esi = CONVERT(al, byte, word32)
	rsi = CONVERT(esi, word32, uint64)
	ecx = Mem0[0x0000000000009300<p64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	edx = Mem0[0x0000000000009300<p64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[0x00000000000092E0<p64>:word64]
	r9 = rdi
	r8d = esi
	r8 = CONVERT(r8d, word32, uint64)
	rsi = 0x00000000000068F0<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call printSIPRO (retsize: 8;)
	// succ:  l00000000000056A2
l00000000000056A2:
	eax = Mem0[rbp - 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = CONVERT(0<32> + rax * 8<64>, word32, word64)
	rax = 0x0000000000009080<p64>
	rax = Mem0[rdx + rax:word64]
	call rax (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00000000000056E7
	// succ:  l00000000000056BE l00000000000056E7
l00000000000056BE:
	eax = CONVERT(Mem0[rbp - 0xD<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = 0x0000000000006920<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000005712
	// succ:  l0000000000005712
l00000000000056E7:
	eax = Mem0[rbp - 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = CONVERT(0<32> + rax * 8<64>, word32, word64)
	rax = 0x0000000000009080<p64>
	rax = Mem0[rdx + rax:word64]
	rdx = 0x00000000000053D0<p64>
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l00000000000055A6
	// succ:  l000000000000570D l00000000000055A6
l000000000000570D:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000005712
l0000000000005712:
	rcx = Mem0[rbp - 8<64>:word64]
	rcx = rcx ^ Mem0[fs:0x28<32>:word64]
	SZO = cond(rcx)
	C = false
	branch Test(EQ,Z) l0000000000005726
	// succ:  l0000000000005721 l0000000000005726
l0000000000005721:
	call fn0000000000002170 (retsize: 8;)
	// succ:  l0000000000005726
l0000000000005726:
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  execute_exit
execute_exit:


// startProg
// Return size: 8
define startProg
startProg_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000005728
l0000000000005728:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	call mcount (retsize: 8;)
	Mem0[0x0000000000009300<p64>:word32] = 0<32>
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call execute (retsize: 8;)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  startProg_exit
startProg_exit:


// usage
// Return size: 8
define usage
usage_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l000000000000574C
l000000000000574C:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	Mem0[rbp - 8<64>:word64] = rdi
	Mem0[rbp - 0x10<64>:word64] = rsi
	Mem0[rbp - 0x18<64>:word64] = rdx
	rax = Mem0[rbp - 8<64>:word64]
	rcx = rax
	edx = 0xB<32>
	rdx = CONVERT(edx, word32, uint64)
	esi = 1<32>
	rsi = CONVERT(esi, word32, uint64)
	rdi = 0x0000000000006950<p64>
	call fn0000000000002240 (retsize: 8;)
	rdx = Mem0[rbp - 0x10<64>:word64]
	rax = Mem0[rbp - 8<64>:word64]
	rsi = 0x0000000000006960<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	rax = Mem0[rbp - 8<64>:word64]
	rcx = rax
	edx = 0x17<32>
	rdx = CONVERT(edx, word32, uint64)
	esi = 1<32>
	rsi = CONVERT(esi, word32, uint64)
	rdi = 0x000000000000697F<p64>
	call fn0000000000002240 (retsize: 8;)
	rax = Mem0[rbp - 8<64>:word64]
	rcx = rax
	edx = 0x11<32>
	rdx = CONVERT(edx, word32, uint64)
	esi = 1<32>
	rsi = CONVERT(esi, word32, uint64)
	rdi = 0x0000000000006997<p64>
	call fn0000000000002240 (retsize: 8;)
	rax = Mem0[rbp - 8<64>:word64]
	rcx = rax
	edx = 0x26<32>
	rdx = CONVERT(edx, word32, uint64)
	esi = 1<32>
	rsi = CONVERT(esi, word32, uint64)
	rdi = 0x00000000000069B0<p64>
	call fn0000000000002240 (retsize: 8;)
	rax = Mem0[rbp - 8<64>:word64]
	rcx = rax
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	esi = 1<32>
	rsi = CONVERT(esi, word32, uint64)
	rdi = 0x00000000000069D8<p64>
	call fn0000000000002240 (retsize: 8;)
	rax = Mem0[rbp - 8<64>:word64]
	rcx = rax
	edx = 0x22<32>
	rdx = CONVERT(edx, word32, uint64)
	esi = 1<32>
	rsi = CONVERT(esi, word32, uint64)
	rdi = 0x0000000000006A00<p64>
	call fn0000000000002240 (retsize: 8;)
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  usage_exit
usage_exit:


// main
// Return size: 8
define main
main_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000005837
l0000000000005837:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	Mem0[rbp - 0x14<64>:word32] = edi
	Mem0[rbp - 0x20<64>:word64] = rsi
	Mem0[rbp - 0xD<64>:byte] = 0<8>
	SCZO = cond(Mem0[rbp - 0x14<64>:word32] - 1<32>)
	branch Test(GT,SZO) l00000000000058EC
	// succ:  l000000000000585E l00000000000058EC
l000000000000585E:
	rax = Mem0[rbp - 0x20<64>:word64]
	rax = rax + 8<64>
	SCZO = cond(rax)
	rdx = Mem0[rax:word64]
	rax = Mem0[rbp - 0x20<64>:word64]
	rcx = Mem0[rax:word64]
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = rcx
	rdi = rax
	call usage (retsize: 8;)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l00000000000059C7
	// succ:  l00000000000059C7
l000000000000588C:
	SCZO = cond(Mem0[rbp - 0xC<64>:word32] - 0x74<32>)
	branch Test(EQ,Z) l00000000000058A6
	// succ:  l0000000000005892 l00000000000058A6
l0000000000005892:
	SCZO = cond(Mem0[rbp - 0xC<64>:word32] - 0x74<32>)
	branch Test(GT,SZO) l00000000000058BE
	// succ:  l0000000000005898 l00000000000058BE
l0000000000005898:
	SCZO = cond(Mem0[rbp - 0xC<64>:word32] - 0x64<32>)
	branch Test(EQ,Z) l00000000000058AF
	// succ:  l000000000000589E l00000000000058AF
l000000000000589E:
	SCZO = cond(Mem0[rbp - 0xC<64>:word32] - 0x73<32>)
	branch Test(EQ,Z) l00000000000058B5
	// succ:  l00000000000058A4 l00000000000058B5
l00000000000058A4:
	goto l00000000000058BE
	// succ:  l00000000000058BE
l00000000000058A6:
	Mem0[0x0000000000009320<p64>:byte] = 1<8>
	goto l00000000000058EC
	// succ:  l00000000000058EC
l00000000000058AF:
	Mem0[rbp - 0xD<64>:byte] = 1<8>
	goto l00000000000058EC
	// succ:  l00000000000058EC
l00000000000058B5:
	Mem0[0x0000000000009321<p64>:byte] = 1<8>
	goto l00000000000058EC
	// succ:  l00000000000058EC
l00000000000058BE:
	rax = Mem0[rbp - 0x20<64>:word64]
	rax = rax + 8<64>
	SCZO = cond(rax)
	rdx = Mem0[rax:word64]
	rax = Mem0[rbp - 0x20<64>:word64]
	rcx = Mem0[rax:word64]
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = rcx
	rdi = rax
	call usage (retsize: 8;)
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	call fn0000000000002230 (retsize: 8;)
	// succ:  l00000000000058EC
l00000000000058EC:
	rcx = Mem0[rbp - 0x20<64>:word64]
	eax = Mem0[rbp - 0x14<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = 0x0000000000006A23<p64>
	rsi = rcx
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call fn0000000000002200 (retsize: 8;)
	Mem0[rbp - 0xC<64>:word32] = eax
	SCZO = cond(Mem0[rbp - 0xC<64>:word32] - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000000588C
	// succ:  l0000000000005911 l000000000000588C
l0000000000005911:
	eax = Mem0[0x00000000000092C0<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 8<64>, word32, word64)
	rax = Mem0[rbp - 0x20<64>:word64]
	rax = rax + rdx
	SCZO = cond(rax)
	rax = Mem0[rax:word64]
	rsi = 0x0000000000006A28<p64>
	rdi = rax
	call fn00000000000021F0 (retsize: 8;)
	Mem0[rbp - 8<64>:word64] = rax
	SCZO = cond(Mem0[rbp - 8<64>:word64] - 0<64>)
	branch Test(NE,Z) l0000000000005992
	// succ:  l0000000000005945 l0000000000005992
l0000000000005945:
	call fn0000000000002150 (retsize: 8;)
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call fn0000000000002250 (retsize: 8;)
	rcx = rax
	eax = Mem0[0x00000000000092C0<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0<32> + rax * 8<64>, word32, word64)
	rax = Mem0[rbp - 0x20<64>:word64]
	rax = rax + rdx
	SCZO = cond(rax)
	rdx = Mem0[rax:word64]
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = 0x0000000000006A2B<p64>
	rdi = rax
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l00000000000059C7
	// succ:  l00000000000059C7
l0000000000005992:
	rax = Mem0[rbp - 8<64>:word64]
	rdi = rax
	call loadMemoryFromFile (retsize: 8;)
	rax = Mem0[rbp - 8<64>:word64]
	rdi = rax
	call fn0000000000002160 (retsize: 8;)
	SCZO = cond(Mem0[rbp - 0xD<64>:byte] - 0<8>)
	branch Test(EQ,Z) l00000000000059B5
	// succ:  l00000000000059B0 l00000000000059B5
l00000000000059B0:
	call dumpMemory (retsize: 8;)
	// succ:  l00000000000059B5
l00000000000059B5:
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call startProg (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	al = CONVERT(Test(EQ,Z), bool, int8)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000000059C7
l00000000000059C7:
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  main_exit
main_exit:


// readByte
// Return size: 8
define readByte
readByte_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l00000000000059C9
l00000000000059C9:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x10<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	Mem0[rbp - 4<64>:word32] = edi
	Mem0[rbp - 0x10<64>:word64] = rsi
	SCZO = cond(Mem0[rbp - 4<64>:word32] - 0x7FFF<32>)
	branch Test(ULE,CZ) l0000000000005A15
	// succ:  l00000000000059EB l0000000000005A15
l00000000000059EB:
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rcx = rax
	edx = 0xB<32>
	rdx = CONVERT(edx, word32, uint64)
	esi = 1<32>
	rsi = CONVERT(esi, word32, uint64)
	rdi = 0x0000000000006A60<p64>
	call fn0000000000002240 (retsize: 8;)
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	call fn0000000000002230 (retsize: 8;)
	// succ:  l0000000000005A15
l0000000000005A15:
	eax = Mem0[rbp - 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = 0x0000000000009340<p64>
	edx = CONVERT(Mem0[rax + rdx:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp - 0x10<64>:word64]
	Mem0[rax:byte] = dl
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  readByte_exit
readByte_exit:


// writeByte
// Return size: 8
define writeByte
writeByte_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000005A2C
l0000000000005A2C:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x10<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	Mem0[rbp - 4<64>:word32] = edi
	eax = esi
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp - 8<64>:byte] = al
	SCZO = cond(Mem0[rbp - 4<64>:word32] - 0x7FFF<32>)
	branch Test(ULE,CZ) l0000000000005A79
	// succ:  l0000000000005A4F l0000000000005A79
l0000000000005A4F:
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rcx = rax
	edx = 0xB<32>
	rdx = CONVERT(edx, word32, uint64)
	esi = 1<32>
	rsi = CONVERT(esi, word32, uint64)
	rdi = 0x0000000000006A60<p64>
	call fn0000000000002240 (retsize: 8;)
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	call fn0000000000002230 (retsize: 8;)
	// succ:  l0000000000005A79
l0000000000005A79:
	eax = Mem0[rbp - 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rcx = 0x0000000000009340<p64>
	edx = CONVERT(Mem0[rbp - 8<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rax + rcx:byte] = dl
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  writeByte_exit
writeByte_exit:


// readWord
// Return size: 8
define readWord
readWord_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000005A8D
l0000000000005A8D:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x10<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	Mem0[rbp - 4<64>:word32] = edi
	Mem0[rbp - 0x10<64>:word64] = rsi
	SCZO = cond(Mem0[rbp - 4<64>:word32] - 0x7FFF<32>)
	branch Test(UGT,CZ) l0000000000005AB9
	// succ:  l0000000000005AAF l0000000000005AB9
l0000000000005AAF:
	eax = Mem0[rbp - 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000005AE3
	// succ:  l0000000000005AB9 l0000000000005AE3
l0000000000005AB9:
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rcx = rax
	edx = 0xB<32>
	rdx = CONVERT(edx, word32, uint64)
	esi = 1<32>
	rsi = CONVERT(esi, word32, uint64)
	rdi = 0x0000000000006A60<p64>
	call fn0000000000002240 (retsize: 8;)
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	call fn0000000000002230 (retsize: 8;)
	// succ:  l0000000000005AE3
l0000000000005AE3:
	eax = Mem0[rbp - 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = 0x0000000000009340<p64>
	eax = CONVERT(Mem0[rax + rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = eax << 8<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	eax = Mem0[rbp - 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	rax = 0x0000000000009340<p64>
	eax = CONVERT(Mem0[rdx + rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = ecx | eax
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	edx = ecx
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp - 0x10<64>:word64]
	Mem0[rax:word32] = edx
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  readWord_exit
readWord_exit:


// writeWord
// Return size: 8
define writeWord
writeWord_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000005B1C
l0000000000005B1C:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x10<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	Mem0[rbp - 4<64>:word32] = edi
	Mem0[rbp - 8<64>:word32] = esi
	SCZO = cond(Mem0[rbp - 4<64>:word32] - 0x7FFF<32>)
	branch Test(UGT,CZ) l0000000000005B47
	// succ:  l0000000000005B3D l0000000000005B47
l0000000000005B3D:
	eax = Mem0[rbp - 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000005B71
	// succ:  l0000000000005B47 l0000000000005B71
l0000000000005B47:
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rcx = rax
	edx = 0xB<32>
	rdx = CONVERT(edx, word32, uint64)
	esi = 1<32>
	rsi = CONVERT(esi, word32, uint64)
	rdi = 0x0000000000006A60<p64>
	call fn0000000000002240 (retsize: 8;)
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	call fn0000000000002230 (retsize: 8;)
	// succ:  l0000000000005B71
l0000000000005B71:
	eax = Mem0[rbp - 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax >>u 8<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	eax = Mem0[rbp - 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = 0x0000000000009340<p64>
	Mem0[rax + rdx:byte] = cl
	eax = Mem0[rbp - 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	eax = Mem0[rbp - 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	edx = edx
	rdx = CONVERT(edx, word32, uint64)
	rax = 0x0000000000009340<p64>
	Mem0[rdx + rax:byte] = cl
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  writeWord_exit
writeWord_exit:


// loadMemoryFromFile
// Return size: 8
define loadMemoryFromFile
loadMemoryFromFile_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000005BA0
l0000000000005BA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	Mem0[rbp - 0x18<64>:word64] = rdi
	Mem0[rbp - 8<64>:word32] = 0<32>
	goto l0000000000005BD5
	// succ:  l0000000000005BD5
l0000000000005BBF:
	eax = Mem0[rbp - 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	eax = Mem0[rbp - 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	esi = edx
	rsi = CONVERT(esi, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call writeByte (retsize: 8;)
	v17 = Mem0[rbp - 8<64>:word32] + 1<32>
	Mem0[rbp - 8<64>:word32] = v17
	SCZO = cond(v17)
	// succ:  l0000000000005BD5
l0000000000005BD5:
	rax = Mem0[rbp - 0x18<64>:word64]
	rdi = rax
	call fn00000000000021E0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000005BFA
	// succ:  l0000000000005BE5 l0000000000005BFA
l0000000000005BE5:
	rax = Mem0[rbp - 0x18<64>:word64]
	rdi = rax
	call fn0000000000002190 (retsize: 8;)
	Mem0[rbp - 4<64>:word32] = eax
	SCZO = cond(Mem0[rbp - 4<64>:word32] - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l0000000000005BBF
	// succ:  l0000000000005BFA l0000000000005BBF
l0000000000005BFA:
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  loadMemoryFromFile_exit
loadMemoryFromFile_exit:


// address
// Return size: 8
define address
address_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000005BFD
l0000000000005BFD:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 8<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	Mem0[rbp - 4<64>:word32] = edi
	eax = Mem0[rbp - 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = 0x0000000000009340<p64>
	rax = rax + rdx
	SCZO = cond(rax)
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  address_exit
address_exit:


// dumpMemory
// Return size: 8
define dumpMemory
dumpMemory_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000005C21
l0000000000005C21:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	call mcount (retsize: 8;)
	Mem0[rbp - 0x34<64>:word32] = 0<32>
	goto l0000000000005E03
	// succ:  l0000000000005E03
l0000000000005C48:
	eax = Mem0[rbp - 0x34<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 0xE<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	rax = 0x0000000000009340<p64>
	eax = CONVERT(Mem0[rdx + rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = CONVERT(al, byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	eax = Mem0[rbp - 0x34<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 0xF<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	rax = 0x0000000000009340<p64>
	eax = CONVERT(Mem0[rdx + rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	esi = CONVERT(al, byte, word32)
	rsi = CONVERT(esi, word32, uint64)
	eax = Mem0[rbp - 0x34<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 0xC<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	rax = 0x0000000000009340<p64>
	eax = CONVERT(Mem0[rdx + rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	r9d = CONVERT(al, byte, word32)
	r9 = CONVERT(r9d, word32, uint64)
	eax = Mem0[rbp - 0x34<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 0xD<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	rax = 0x0000000000009340<p64>
	eax = CONVERT(Mem0[rdx + rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp - 0x44<64>:word32] = eax
	eax = Mem0[rbp - 0x34<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 0xA<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	rax = 0x0000000000009340<p64>
	eax = CONVERT(Mem0[rdx + rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ebx = CONVERT(al, byte, word32)
	rbx = CONVERT(ebx, word32, uint64)
	Mem0[rbp - 0x48<64>:word32] = ebx
	eax = Mem0[rbp - 0x34<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 0xB<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	rax = 0x0000000000009340<p64>
	eax = CONVERT(Mem0[rdx + rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edi = CONVERT(al, byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	Mem0[rbp - 0x4C<64>:word32] = edi
	eax = Mem0[rbp - 0x34<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 8<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	rax = 0x0000000000009340<p64>
	eax = CONVERT(Mem0[rdx + rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	r15d = CONVERT(al, byte, word32)
	r15 = CONVERT(r15d, word32, uint64)
	eax = Mem0[rbp - 0x34<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 9<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	rax = 0x0000000000009340<p64>
	eax = CONVERT(Mem0[rdx + rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	r14d = CONVERT(al, byte, word32)
	r14 = CONVERT(r14d, word32, uint64)
	eax = Mem0[rbp - 0x34<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 6<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	rax = 0x0000000000009340<p64>
	eax = CONVERT(Mem0[rdx + rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	r13d = CONVERT(al, byte, word32)
	r13 = CONVERT(r13d, word32, uint64)
	eax = Mem0[rbp - 0x34<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 7<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	rax = 0x0000000000009340<p64>
	eax = CONVERT(Mem0[rdx + rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	r12d = CONVERT(al, byte, word32)
	r12 = CONVERT(r12d, word32, uint64)
	eax = Mem0[rbp - 0x34<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 4<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	rax = 0x0000000000009340<p64>
	eax = CONVERT(Mem0[rdx + rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ebx = CONVERT(al, byte, word32)
	rbx = CONVERT(ebx, word32, uint64)
	eax = Mem0[rbp - 0x34<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 5<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	rax = 0x0000000000009340<p64>
	eax = CONVERT(Mem0[rdx + rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	r11d = CONVERT(al, byte, word32)
	r11 = CONVERT(r11d, word32, uint64)
	eax = Mem0[rbp - 0x34<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	rax = 0x0000000000009340<p64>
	eax = CONVERT(Mem0[rdx + rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	r10d = CONVERT(al, byte, word32)
	r10 = CONVERT(r10d, word32, uint64)
	eax = Mem0[rbp - 0x34<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 3<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	rax = 0x0000000000009340<p64>
	eax = CONVERT(Mem0[rdx + rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbp - 0x50<64>:word32] = edx
	edx = Mem0[rbp - 0x34<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = 0x0000000000009340<p64>
	eax = CONVERT(Mem0[rdx + rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	r8d = CONVERT(al, byte, word32)
	r8 = CONVERT(r8d, word32, uint64)
	eax = Mem0[rbp - 0x34<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	rax = 0x0000000000009340<p64>
	eax = CONVERT(Mem0[rdx + rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rdi = Mem0[0x00000000000092E0<p64>:word64]
	eax = Mem0[rbp - 0x34<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp - 8<64>
	SCZO = cond(rsp)
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rcx
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r9
	ecx = Mem0[rbp - 0x44<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rcx
	esi = Mem0[rbp - 0x48<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	ecx = Mem0[rbp - 0x4C<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rcx
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r11
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r10
	r9d = Mem0[rbp - 0x50<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	ecx = edx
	rcx = CONVERT(ecx, word32, uint64)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	rsi = 0x0000000000006A70<p64>
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	call fn00000000000021D0 (retsize: 8;)
	rsp = rsp + 0x70<64>
	SCZO = cond(rsp)
	v35 = Mem0[rbp - 0x34<64>:word32] + 0x10<32>
	Mem0[rbp - 0x34<64>:word32] = v35
	SCZO = cond(v35)
	// succ:  l0000000000005E03
l0000000000005E03:
	SCZO = cond(Mem0[rbp - 0x34<64>:word32] - 0x7FFF<32>)
	branch Test(ULE,CZ) l0000000000005C48
	// succ:  l0000000000005E10 l0000000000005C48
l0000000000005E10:
	rax = Mem0[0x00000000000092E0<p64>:word64]
	rsi = rax
	edi = 0xA<32>
	rdi = CONVERT(edi, word32, uint64)
	call fn00000000000021A0 (retsize: 8;)
	rsp = rbp - 0x28<64>
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  dumpMemory_exit
dumpMemory_exit:


// __libc_csu_init
// Return size: 8
define __libc_csu_init
__libc_csu_init_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000005E40
l0000000000005E40:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	r15 = 0x0000000000008C70<p64>
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	r14 = rdx
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	r13 = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	r12d = edi
	r12 = CONVERT(r12d, word32, uint64)
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = 0x0000000000008C78<p64>
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rbp = rbp - r15
	SCZO = cond(rbp)
	rsp = rsp - 8<64>
	SCZO = cond(rsp)
	call _init (retsize: 8;)
	rbp = rbp >> 3<64>
	SCZO = cond(rbp)
	branch Test(EQ,Z) l0000000000005E96
	// succ:  l0000000000005E77 l0000000000005E96
l0000000000005E77:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	// succ:  l0000000000005E80
l0000000000005E80:
	rdx = r14
	rsi = r13
	edi = r12d
	rdi = CONVERT(edi, word32, uint64)
	call Mem0[r15 + rbx * 8<64>:word64] (retsize: 8;)
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	SCZO = cond(rbp - rbx)
	branch Test(NE,Z) l0000000000005E80
	// succ:  l0000000000005E96 l0000000000005E80
l0000000000005E96:
	rsp = rsp + 8<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  __libc_csu_init_exit
__libc_csu_init_exit:


// __libc_csu_fini
// Return size: 8
define __libc_csu_fini
__libc_csu_fini_entry:
	rsp = fp
	Top = 0<i8>
	// succ:  l0000000000005EB0
l0000000000005EB0:
	return
	// succ:  __libc_csu_fini_exit
__libc_csu_fini_exit:


// atexit
// Return size: 0
define atexit
atexit_entry:
	rsp = fp
	Top = 0<i8>
	goto l0000000000005EC0
	// succ:  l0000000000005EC0
l0000000000002210:
	call __cxa_atexit (retsize: 0;)
	return
	// succ:  atexit_exit
l0000000000005EC0:
	rdx = Mem0[0x0000000000009008<p64>:word64]
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	goto l0000000000002210
	// succ:  l0000000000002210
atexit_exit:


